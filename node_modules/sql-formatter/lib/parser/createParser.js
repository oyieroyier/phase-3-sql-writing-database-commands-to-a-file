"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParser = createParser;

var _nearley = require("nearley");

var _disambiguateTokens = require("../lexer/disambiguateTokens");

var _grammar = _interopRequireDefault(require("./grammar"));

var _LexerAdapter = _interopRequireDefault(require("./LexerAdapter"));

var _token = require("../lexer/token");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Creates a parser object which wraps the setup of Nearley parser
 */
function createParser(tokenizer) {
  var paramTypesOverrides = {};
  var lexer = new _LexerAdapter["default"](function (chunk) {
    return [].concat(_toConsumableArray((0, _disambiguateTokens.disambiguateTokens)(tokenizer.tokenize(chunk, paramTypesOverrides))), [(0, _token.createEofToken)(chunk.length)]);
  });
  var parser = new _nearley.Parser(_nearley.Grammar.fromCompiled(_grammar["default"]), {
    lexer: lexer
  });
  return {
    parse: function parse(sql, paramTypes) {
      // share paramTypesOverrides with Tokenizer
      paramTypesOverrides = paramTypes;

      var _parser$feed = parser.feed(sql),
          results = _parser$feed.results;

      if (results.length === 1) {
        return results[0];
      } else if (results.length === 0) {
        // Ideally we would report a line number where the parser failed,
        // but I haven't found a way to get this info from Nearley :(
        throw new Error('Parse error: Invalid SQL');
      } else {
        throw new Error('Parse error: Ambiguous grammar');
      }
    }
  };
}
//# sourceMappingURL=createParser.js.map