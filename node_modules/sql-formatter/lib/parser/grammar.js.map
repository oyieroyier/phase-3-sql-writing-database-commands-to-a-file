{"version":3,"file":"grammar.js","names":["id","d","lexer","LexerAdapter","chunk","unwrap","el","toKeywordNode","token","type","NodeType","keyword","tokenType","text","raw","addLeadingComments","node","comments","length","leadingComments","addTrailingComments","trailingComments","grammar","Lexer","ParserRules","concat","statements","last","hasSemicolon","children","slice","has","DELIMITER","EOF","delimiter","statement","TokenType","expressions","clauses","COMMA","LIMIT","limitToken","_","exp1","optional","comma","exp2","limit_clause","name","offset","count","RESERVED_SELECT","nameToken","exp","clause","ASTERISK","all_columns_asterisk","RESERVED_COMMAND","RESERVED_SET_OPERATION","set_operation","expr","ARRAY_IDENTIFIER","arrayToken","brackets","array_subscript","array","identifier","parenthesis","ARRAY_KEYWORD","RESERVED_FUNCTION_NAME","parens","function_call","open","close","openParen","closeParen","DOT","object","_1","dot","_2","property","property_access","BETWEEN","AND","betweenToken","expr1","andToken","_3","expr2","between_predicate","between","and","operator","OPERATOR","IDENTIFIER","QUOTED_IDENTIFIER","VARIABLE","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","parameter","key","NUMBER","STRING","literal","RESERVED_KEYWORD","RESERVED_PHRASE","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN","CASE","END","OR","XOR","LINE_COMMENT","line_comment","precedingWhitespace","BLOCK_COMMENT","block_comment","ParserStart"],"sources":["../../src/parser/grammar.ts"],"sourcesContent":["// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var DELIMITER: any;\ndeclare var EOF: any;\ndeclare var LIMIT: any;\ndeclare var COMMA: any;\ndeclare var RESERVED_SELECT: any;\ndeclare var ASTERISK: any;\ndeclare var RESERVED_COMMAND: any;\ndeclare var RESERVED_SET_OPERATION: any;\ndeclare var ARRAY_IDENTIFIER: any;\ndeclare var ARRAY_KEYWORD: any;\ndeclare var RESERVED_FUNCTION_NAME: any;\ndeclare var DOT: any;\ndeclare var BETWEEN: any;\ndeclare var AND: any;\ndeclare var OPERATOR: any;\ndeclare var IDENTIFIER: any;\ndeclare var QUOTED_IDENTIFIER: any;\ndeclare var VARIABLE: any;\ndeclare var NAMED_PARAMETER: any;\ndeclare var QUOTED_PARAMETER: any;\ndeclare var NUMBERED_PARAMETER: any;\ndeclare var POSITIONAL_PARAMETER: any;\ndeclare var NUMBER: any;\ndeclare var STRING: any;\ndeclare var RESERVED_KEYWORD: any;\ndeclare var RESERVED_PHRASE: any;\ndeclare var RESERVED_DEPENDENT_CLAUSE: any;\ndeclare var RESERVED_JOIN: any;\ndeclare var CASE: any;\ndeclare var END: any;\ndeclare var OR: any;\ndeclare var XOR: any;\ndeclare var LINE_COMMENT: any;\ndeclare var BLOCK_COMMENT: any;\n\nimport LexerAdapter from 'src/parser/LexerAdapter';\nimport { NodeType, AstNode, CommentNode, KeywordNode } from 'src/parser/ast';\nimport { Token, TokenType } from 'src/lexer/token';\n\n// The lexer here is only to provide the has() method,\n// that's used inside the generated grammar definition.\n// A proper lexer gets passed to Nearley Parser constructor.\nconst lexer = new LexerAdapter(chunk => []);\n\n// Used for unwrapping grammar rules like:\n//\n//   rule -> ( foo | bar | baz )\n//\n// which otherwise produce single element nested inside two arrays\nconst unwrap = <T>([[el]]: T[][]): T => el;\n\nconst toKeywordNode = (token: Token): KeywordNode => ({\n  type: NodeType.keyword,\n  tokenType: token.type,\n  text: token.text,\n  raw: token.raw,\n});\n\nconst addLeadingComments = (node: AstNode, comments: CommentNode[]): AstNode =>\n  comments.length > 0 ? { ...node, leadingComments: comments } : node;\n\nconst addTrailingComments = (node: AstNode, comments: CommentNode[]): AstNode =>\n  comments.length > 0 ? { ...node, trailingComments: comments } : node;\n\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexer,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\": \n        ([statements]) => {\n          const last = statements[statements.length - 1];\n          if (last && !last.hasSemicolon) {\n            // we have fully parsed the whole file\n            // discard the last statement when it's empty\n            return last.children.length > 0 ? statements : statements.slice(0, -1);\n          } else {\n            // parsing still in progress, do nothing\n            return statements;\n          }\n        }\n        },\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"DELIMITER\") ? {type: \"DELIMITER\"} : DELIMITER)]},\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"EOF\") ? {type: \"EOF\"} : EOF)]},\n    {\"name\": \"statement\", \"symbols\": [\"expressions_or_clauses\", \"statement$subexpression$1\"], \"postprocess\": \n        ([children, [delimiter]]) => ({\n          type: NodeType.statement,\n          children,\n          hasSemicolon: delimiter.type === TokenType.DELIMITER,\n        })\n        },\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": [\"expressions_or_clauses$ebnf$2\", \"clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expressions_or_clauses$ebnf$2\"], \"postprocess\": \n        ([expressions, clauses]) => [...expressions, ...clauses]\n        },\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"limit_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"select_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"other_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"set_operation\"]},\n    {\"name\": \"clause\", \"symbols\": [\"clause$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"expression_with_comments\"]},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1\", \"expression_with_comments\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"expression\"]},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA), \"limit_clause$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"limit_clause$ebnf$2\", \"symbols\": [\"limit_clause$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"limit_clause$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"limit_clause\", \"symbols\": [(lexer.has(\"LIMIT\") ? {type: \"LIMIT\"} : LIMIT), \"_\", \"limit_clause$ebnf$1\", \"limit_clause$ebnf$2\"], \"postprocess\": \n        ([limitToken, _, exp1, optional]) => {\n          if (optional) {\n            const [comma, exp2] = optional;\n            return {\n              type: NodeType.limit_clause,\n              name: addTrailingComments(toKeywordNode(limitToken), _),\n              offset: exp1,\n              count: exp2,\n            };\n          } else {\n            return {\n              type: NodeType.limit_clause,\n              name: addTrailingComments(toKeywordNode(limitToken), _),\n              count: exp1,\n            };\n          }\n        }\n        },\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": [\"select_clause$subexpression$1$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"all_columns_asterisk\", \"select_clause$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": [\"select_clause$subexpression$1$ebnf$2\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"asteriskless_expression\", \"select_clause$subexpression$1$ebnf$2\"]},\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT), \"select_clause$subexpression$1\"], \"postprocess\": \n        ([nameToken, [exp, expressions]]) => ({\n          type: NodeType.clause,\n          name: toKeywordNode(nameToken),\n          children: [exp, ...expressions],\n        })\n        },\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT)], \"postprocess\": \n        ([nameToken]) => ({\n          type: NodeType.clause,\n          name: toKeywordNode(nameToken),\n          children: [],\n        })\n        },\n    {\"name\": \"all_columns_asterisk\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)], \"postprocess\": \n        () => ({ type: NodeType.all_columns_asterisk })\n        },\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": []},\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": [\"other_clause$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"other_clause\", \"symbols\": [(lexer.has(\"RESERVED_COMMAND\") ? {type: \"RESERVED_COMMAND\"} : RESERVED_COMMAND), \"other_clause$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.clause,\n          name: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": []},\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": [\"set_operation$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"set_operation\", \"symbols\": [(lexer.has(\"RESERVED_SET_OPERATION\") ? {type: \"RESERVED_SET_OPERATION\"} : RESERVED_SET_OPERATION), \"set_operation$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.set_operation,\n          name: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"expression_with_comments\", \"symbols\": [\"simple_expression\", \"_\"], \"postprocess\": \n        ([expr, _]) => addTrailingComments(expr, _)\n        },\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"simple_expression\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"between_predicate\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"comment\"]},\n    {\"name\": \"expression\", \"symbols\": [\"expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"simple_expression_without_asterisk\"]},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"between_predicate\"]},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"comment\"]},\n    {\"name\": \"asteriskless_expression\", \"symbols\": [\"asteriskless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"simple_expression_without_asterisk\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"simple_expression\", \"symbols\": [\"simple_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"function_call\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"property_access\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"curly_braces\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"square_brackets\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"operator\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"parameter\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"literal\"]},\n    {\"name\": \"simple_expression_without_asterisk$subexpression$1\", \"symbols\": [\"keyword\"]},\n    {\"name\": \"simple_expression_without_asterisk\", \"symbols\": [\"simple_expression_without_asterisk$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_IDENTIFIER\") ? {type: \"ARRAY_IDENTIFIER\"} : ARRAY_IDENTIFIER), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addTrailingComments({ type: NodeType.identifier, text: arrayToken.text}, _),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_KEYWORD\") ? {type: \"ARRAY_KEYWORD\"} : ARRAY_KEYWORD), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addTrailingComments(toKeywordNode(arrayToken), _),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"RESERVED_FUNCTION_NAME\") ? {type: \"RESERVED_FUNCTION_NAME\"} : RESERVED_FUNCTION_NAME), \"_\", \"parenthesis\"], \"postprocess\": \n        ([nameToken, _, parens]) => ({\n          type: NodeType.function_call,\n          name: addTrailingComments(toKeywordNode(nameToken), _),\n          parenthesis: parens,\n        })\n        },\n    {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\"}, \"expressions_or_clauses\", {\"literal\":\")\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"(\",\n          closeParen: \")\",\n        })\n        },\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": []},\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": [\"curly_braces$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"curly_braces\", \"symbols\": [{\"literal\":\"{\"}, \"curly_braces$ebnf$1\", {\"literal\":\"}\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"{\",\n          closeParen: \"}\",\n        })\n        },\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": []},\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": [\"square_brackets$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"square_brackets\", \"symbols\": [{\"literal\":\"[\"}, \"square_brackets$ebnf$1\", {\"literal\":\"]\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"[\",\n          closeParen: \"]\",\n        })\n        },\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"all_columns_asterisk\"]},\n    {\"name\": \"property_access\", \"symbols\": [\"simple_expression\", \"_\", (lexer.has(\"DOT\") ? {type: \"DOT\"} : DOT), \"_\", \"property_access$subexpression$1\"], \"postprocess\": \n        // Allowing property to be <array_subscript> is currently a hack.\n        // A better way would be to allow <property_access> on the left side of array_subscript,\n        // but we currently can't do that because of another hack that requires\n        // %ARRAY_IDENTIFIER on the left side of <array_subscript>.\n        ([object, _1, dot, _2, [property]]) => {\n          return {\n            type: NodeType.property_access,\n            object: addTrailingComments(object, _1),\n            property: addLeadingComments(property, _2),\n          };\n        }\n        },\n    {\"name\": \"between_predicate\", \"symbols\": [(lexer.has(\"BETWEEN\") ? {type: \"BETWEEN\"} : BETWEEN), \"_\", \"simple_expression\", \"_\", (lexer.has(\"AND\") ? {type: \"AND\"} : AND), \"_\", \"simple_expression\"], \"postprocess\": \n        ([betweenToken, _1, expr1, _2, andToken, _3, expr2]) => ({\n          type: NodeType.between_predicate,\n          between: toKeywordNode(betweenToken),\n          expr1: [addTrailingComments(addLeadingComments(expr1, _1), _2)],\n          and: toKeywordNode(andToken),\n          expr2: [addLeadingComments(expr2, _3)],\n        })\n        },\n    {\"name\": \"comma$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA)]},\n    {\"name\": \"comma\", \"symbols\": [\"comma$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.comma })},\n    {\"name\": \"asterisk$subexpression$1\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)]},\n    {\"name\": \"asterisk\", \"symbols\": [\"asterisk$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [(lexer.has(\"OPERATOR\") ? {type: \"OPERATOR\"} : OPERATOR)]},\n    {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"IDENTIFIER\") ? {type: \"IDENTIFIER\"} : IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_IDENTIFIER\") ? {type: \"QUOTED_IDENTIFIER\"} : QUOTED_IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"VARIABLE\") ? {type: \"VARIABLE\"} : VARIABLE)]},\n    {\"name\": \"identifier\", \"symbols\": [\"identifier$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.identifier, text: token.text })},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NAMED_PARAMETER\") ? {type: \"NAMED_PARAMETER\"} : NAMED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_PARAMETER\") ? {type: \"QUOTED_PARAMETER\"} : QUOTED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBERED_PARAMETER\") ? {type: \"NUMBERED_PARAMETER\"} : NUMBERED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"POSITIONAL_PARAMETER\") ? {type: \"POSITIONAL_PARAMETER\"} : POSITIONAL_PARAMETER)]},\n    {\"name\": \"parameter\", \"symbols\": [\"parameter$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.parameter, key: token.key, text: token.text })},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBER\") ? {type: \"NUMBER\"} : NUMBER)]},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"STRING\") ? {type: \"STRING\"} : STRING)]},\n    {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.literal, text: token.text })},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_KEYWORD\") ? {type: \"RESERVED_KEYWORD\"} : RESERVED_KEYWORD)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_PHRASE\") ? {type: \"RESERVED_PHRASE\"} : RESERVED_PHRASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_DEPENDENT_CLAUSE\") ? {type: \"RESERVED_DEPENDENT_CLAUSE\"} : RESERVED_DEPENDENT_CLAUSE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_JOIN\") ? {type: \"RESERVED_JOIN\"} : RESERVED_JOIN)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"CASE\") ? {type: \"CASE\"} : CASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"END\") ? {type: \"END\"} : END)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"AND\") ? {type: \"AND\"} : AND)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"OR\") ? {type: \"OR\"} : OR)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"XOR\") ? {type: \"XOR\"} : XOR)]},\n    {\"name\": \"keyword\", \"symbols\": [\"keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"comment\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": ([comments]) => comments},\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"LINE_COMMENT\") ? {type: \"LINE_COMMENT\"} : LINE_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.line_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"BLOCK_COMMENT\") ? {type: \"BLOCK_COMMENT\"} : BLOCK_COMMENT)], \"postprocess\": \n        ([token]) => ({ type: NodeType.block_comment, text: token.text })\n        }\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n"],"mappings":";;;;;;;AAwCA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1CA;AACA;AACA;AACA;AACA,SAASA,EAAT,CAAYC,CAAZ,EAA2B;EAAE,OAAOA,CAAC,CAAC,CAAD,CAAR;AAAc;;AAwC3C;AACA;AACA;AACA,IAAMC,KAAK,GAAG,IAAIC,wBAAJ,CAAiB,UAAAC,KAAK;EAAA,OAAI,EAAJ;AAAA,CAAtB,CAAd,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS;EAAA;EAAA;EAAA,IAAMC,EAAN;;EAAA,OAAyBA,EAAzB;AAAA,CAAf;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;EAAA,OAAgC;IACpDC,IAAI,EAAEC,aAAA,CAASC,OADqC;IAEpDC,SAAS,EAAEJ,KAAK,CAACC,IAFmC;IAGpDI,IAAI,EAAEL,KAAK,CAACK,IAHwC;IAIpDC,GAAG,EAAEN,KAAK,CAACM;EAJyC,CAAhC;AAAA,CAAtB;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAgBC,QAAhB;EAAA,OACzBA,QAAQ,CAACC,MAAT,GAAkB,CAAlB,mCAA2BF,IAA3B;IAAiCG,eAAe,EAAEF;EAAlD,KAA+DD,IADtC;AAAA,CAA3B;;AAGA,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACJ,IAAD,EAAgBC,QAAhB;EAAA,OAC1BA,QAAQ,CAACC,MAAT,GAAkB,CAAlB,mCAA2BF,IAA3B;IAAiCK,gBAAgB,EAAEJ;EAAnD,KAAgED,IADtC;AAAA,CAA5B;;AAOC;AAQA;AAMA;AAQA;AAED,IAAMM,OAAgB,GAAG;EACvBC,KAAK,EAAErB,KADgB;EAEvBsB,WAAW,EAAE,CACX;IAAC,QAAQ,aAAT;IAAwB,WAAW;EAAnC,CADW,EAEX;IAAC,QAAQ,aAAT;IAAwB,WAAW,CAAC,aAAD,EAAgB,WAAhB,CAAnC;IAAiE,eAAe,qBAACvB,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAhF,CAFW,EAGX;IAAC,QAAQ,MAAT;IAAiB,WAAW,CAAC,aAAD,CAA5B;IAA6C,eACzC,4BAAkB;MAAA;MAAA,IAAhByB,UAAgB;;MAChB,IAAMC,IAAI,GAAGD,UAAU,CAACA,UAAU,CAACR,MAAX,GAAoB,CAArB,CAAvB;;MACA,IAAIS,IAAI,IAAI,CAACA,IAAI,CAACC,YAAlB,EAAgC;QAC9B;QACA;QACA,OAAOD,IAAI,CAACE,QAAL,CAAcX,MAAd,GAAuB,CAAvB,GAA2BQ,UAA3B,GAAwCA,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAA/C;MACD,CAJD,MAIO;QACL;QACA,OAAOJ,UAAP;MACD;IACF;EAXL,CAHW,EAgBX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAExB,KAAK,CAAC6B,GAAN,CAAU,WAAV,IAAyB;MAACtB,IAAI,EAAE;IAAP,CAAzB,GAA+CuB,SAAjD;EAAjD,CAhBW,EAiBX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAE9B,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmCwB,GAArC;EAAjD,CAjBW,EAkBX;IAAC,QAAQ,WAAT;IAAsB,WAAW,CAAC,wBAAD,EAA2B,2BAA3B,CAAjC;IAA0F,eACtF;MAAA;MAAA,IAAEJ,QAAF;MAAA;MAAA,IAAaK,SAAb;;MAAA,OAA8B;QAC5BzB,IAAI,EAAEC,aAAA,CAASyB,SADa;QAE5BN,QAAQ,EAARA,QAF4B;QAG5BD,YAAY,EAAEM,SAAS,CAACzB,IAAV,KAAmB2B,gBAAA,CAAUJ;MAHf,CAA9B;IAAA;EADJ,CAlBW,EAyBX;IAAC,QAAQ,+BAAT;IAA0C,WAAW;EAArD,CAzBW,EA0BX;IAAC,QAAQ,+BAAT;IAA0C,WAAW,CAAC,+BAAD,EAAkC,YAAlC,CAArD;IAAsG,eAAe,qBAAC/B,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAArH,CA1BW,EA2BX;IAAC,QAAQ,+BAAT;IAA0C,WAAW;EAArD,CA3BW,EA4BX;IAAC,QAAQ,+BAAT;IAA0C,WAAW,CAAC,+BAAD,EAAkC,QAAlC,CAArD;IAAkG,eAAe,qBAACA,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAjH,CA5BW,EA6BX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,+BAAD,EAAkC,+BAAlC,CAA9C;IAAkH,eAC9G;MAAA;MAAA,IAAEoC,WAAF;MAAA,IAAeC,OAAf;;MAAA,oCAAgCD,WAAhC,sBAAgDC,OAAhD;IAAA;EADJ,CA7BW,EAgCX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,cAAD;EAA9C,CAhCW,EAiCX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,eAAD;EAA9C,CAjCW,EAkCX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,cAAD;EAA9C,CAlCW,EAmCX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,eAAD;EAA9C,CAnCW,EAoCX;IAAC,QAAQ,QAAT;IAAmB,WAAW,CAAC,wBAAD,CAA9B;IAA0D,eAAejC;EAAzE,CApCW,EAqCX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,CAAC,0BAAD;EAA3C,CArCW,EAsCX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,CAAC,qBAAD,EAAwB,0BAAxB,CAA3C;IAAgG,eAAe,qBAACJ,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAA/G,CAtCW,EAuCX;IAAC,QAAQ,4CAAT;IAAuD,WAAW,CAAC,YAAD;EAAlE,CAvCW,EAwCX;IAAC,QAAQ,4CAAT;IAAuD,WAAW,CAAC,4CAAD,EAA+C,YAA/C,CAAlE;IAAgI,eAAe,qBAACA,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAA/I,CAxCW,EAyCX;IAAC,QAAQ,qCAAT;IAAgD,WAAW,CAAEC,KAAK,CAAC6B,GAAN,CAAU,OAAV,IAAqB;MAACtB,IAAI,EAAE;IAAP,CAArB,GAAuC8B,KAAzC,EAAiD,4CAAjD;EAA3D,CAzCW,EA0CX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,CAAC,qCAAD,CAA3C;IAAoF,eAAevC;EAAnG,CA1CW,EA2CX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,EAA3C;IAA+C,eAAe;MAAA,OAAM,IAAN;IAAA;EAA9D,CA3CW,EA4CX;IAAC,QAAQ,cAAT;IAAyB,WAAW,CAAEE,KAAK,CAAC6B,GAAN,CAAU,OAAV,IAAqB;MAACtB,IAAI,EAAE;IAAP,CAArB,GAAuC+B,KAAzC,EAAiD,GAAjD,EAAsD,qBAAtD,EAA6E,qBAA7E,CAApC;IAAyI,eACrI,4BAAqC;MAAA;MAAA,IAAnCC,UAAmC;MAAA,IAAvBC,CAAuB;MAAA,IAApBC,IAAoB;MAAA,IAAdC,QAAc;;MACnC,IAAIA,QAAJ,EAAc;QACZ,+BAAsBA,QAAtB;QAAA,IAAOC,KAAP;QAAA,IAAcC,IAAd;;QACA,OAAO;UACLrC,IAAI,EAAEC,aAAA,CAASqC,YADV;UAELC,IAAI,EAAE5B,mBAAmB,CAACb,aAAa,CAACkC,UAAD,CAAd,EAA4BC,CAA5B,CAFpB;UAGLO,MAAM,EAAEN,IAHH;UAILO,KAAK,EAAEJ;QAJF,CAAP;MAMD,CARD,MAQO;QACL,OAAO;UACLrC,IAAI,EAAEC,aAAA,CAASqC,YADV;UAELC,IAAI,EAAE5B,mBAAmB,CAACb,aAAa,CAACkC,UAAD,CAAd,EAA4BC,CAA5B,CAFpB;UAGLQ,KAAK,EAAEP;QAHF,CAAP;MAKD;IACF;EAjBL,CA5CW,EA+DX;IAAC,QAAQ,sCAAT;IAAiD,WAAW;EAA5D,CA/DW,EAgEX;IAAC,QAAQ,sCAAT;IAAiD,WAAW,CAAC,sCAAD,EAAyC,YAAzC,CAA5D;IAAoH,eAAe,qBAAC1C,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAnI,CAhEW,EAiEX;IAAC,QAAQ,+BAAT;IAA0C,WAAW,CAAC,sBAAD,EAAyB,sCAAzB;EAArD,CAjEW,EAkEX;IAAC,QAAQ,sCAAT;IAAiD,WAAW;EAA5D,CAlEW,EAmEX;IAAC,QAAQ,sCAAT;IAAiD,WAAW,CAAC,sCAAD,EAAyC,YAAzC,CAA5D;IAAoH,eAAe,qBAACA,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAnI,CAnEW,EAoEX;IAAC,QAAQ,+BAAT;IAA0C,WAAW,CAAC,yBAAD,EAA4B,sCAA5B;EAArD,CApEW,EAqEX;IAAC,QAAQ,eAAT;IAA0B,WAAW,CAAEC,KAAK,CAAC6B,GAAN,CAAU,iBAAV,IAA+B;MAACtB,IAAI,EAAE;IAAP,CAA/B,GAA2D0C,eAA7D,EAA+E,+BAA/E,CAArC;IAAsJ,eAClJ;MAAA;MAAA,IAAEC,SAAF;MAAA;MAAA,IAAcC,GAAd;MAAA,IAAmBhB,WAAnB;;MAAA,OAAsC;QACpC5B,IAAI,EAAEC,aAAA,CAAS4C,MADqB;QAEpCN,IAAI,EAAEzC,aAAa,CAAC6C,SAAD,CAFiB;QAGpCvB,QAAQ,GAAGwB,GAAH,4BAAWhB,WAAX;MAH4B,CAAtC;IAAA;EADJ,CArEW,EA4EX;IAAC,QAAQ,eAAT;IAA0B,WAAW,CAAEnC,KAAK,CAAC6B,GAAN,CAAU,iBAAV,IAA+B;MAACtB,IAAI,EAAE;IAAP,CAA/B,GAA2D0C,eAA7D,CAArC;IAAqH,eACjH;MAAA;MAAA,IAAEC,SAAF;;MAAA,OAAkB;QAChB3C,IAAI,EAAEC,aAAA,CAAS4C,MADC;QAEhBN,IAAI,EAAEzC,aAAa,CAAC6C,SAAD,CAFH;QAGhBvB,QAAQ,EAAE;MAHM,CAAlB;IAAA;EADJ,CA5EW,EAmFX;IAAC,QAAQ,sBAAT;IAAiC,WAAW,CAAE3B,KAAK,CAAC6B,GAAN,CAAU,UAAV,IAAwB;MAACtB,IAAI,EAAE;IAAP,CAAxB,GAA6C8C,QAA/C,CAA5C;IAAuG,eACnG;MAAA,OAAO;QAAE9C,IAAI,EAAEC,aAAA,CAAS8C;MAAjB,CAAP;IAAA;EADJ,CAnFW,EAsFX;IAAC,QAAQ,qBAAT;IAAgC,WAAW;EAA3C,CAtFW,EAuFX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,CAAC,qBAAD,EAAwB,YAAxB,CAA3C;IAAkF,eAAe,qBAACvD,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAjG,CAvFW,EAwFX;IAAC,QAAQ,cAAT;IAAyB,WAAW,CAAEC,KAAK,CAAC6B,GAAN,CAAU,kBAAV,IAAgC;MAACtB,IAAI,EAAE;IAAP,CAAhC,GAA6DgD,gBAA/D,EAAkF,qBAAlF,CAApC;IAA8I,eAC1I;MAAA;MAAA,IAAEL,SAAF;MAAA,IAAavB,QAAb;;MAAA,OAA4B;QAC1BpB,IAAI,EAAEC,aAAA,CAAS4C,MADW;QAE1BN,IAAI,EAAEzC,aAAa,CAAC6C,SAAD,CAFO;QAG1BvB,QAAQ,EAARA;MAH0B,CAA5B;IAAA;EADJ,CAxFW,EA+FX;IAAC,QAAQ,sBAAT;IAAiC,WAAW;EAA5C,CA/FW,EAgGX;IAAC,QAAQ,sBAAT;IAAiC,WAAW,CAAC,sBAAD,EAAyB,YAAzB,CAA5C;IAAoF,eAAe,qBAAC5B,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAnG,CAhGW,EAiGX;IAAC,QAAQ,eAAT;IAA0B,WAAW,CAAEC,KAAK,CAAC6B,GAAN,CAAU,wBAAV,IAAsC;MAACtB,IAAI,EAAE;IAAP,CAAtC,GAAyEiD,sBAA3E,EAAoG,sBAApG,CAArC;IAAkK,eAC9J;MAAA;MAAA,IAAEN,SAAF;MAAA,IAAavB,QAAb;;MAAA,OAA4B;QAC1BpB,IAAI,EAAEC,aAAA,CAASiD,aADW;QAE1BX,IAAI,EAAEzC,aAAa,CAAC6C,SAAD,CAFO;QAG1BvB,QAAQ,EAARA;MAH0B,CAA5B;IAAA;EADJ,CAjGW,EAwGX;IAAC,QAAQ,0BAAT;IAAqC,WAAW,CAAC,mBAAD,EAAsB,GAAtB,CAAhD;IAA4E,eACxE;MAAA;MAAA,IAAE+B,IAAF;MAAA,IAAQlB,CAAR;;MAAA,OAAetB,mBAAmB,CAACwC,IAAD,EAAOlB,CAAP,CAAlC;IAAA;EADJ,CAxGW,EA2GX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAC,mBAAD;EAAlD,CA3GW,EA4GX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAC,mBAAD;EAAlD,CA5GW,EA6GX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAC,OAAD;EAAlD,CA7GW,EA8GX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAC,SAAD;EAAlD,CA9GW,EA+GX;IAAC,QAAQ,YAAT;IAAuB,WAAW,CAAC,4BAAD,CAAlC;IAAkE,eAAerC;EAAjF,CA/GW,EAgHX;IAAC,QAAQ,yCAAT;IAAoD,WAAW,CAAC,oCAAD;EAA/D,CAhHW,EAiHX;IAAC,QAAQ,yCAAT;IAAoD,WAAW,CAAC,mBAAD;EAA/D,CAjHW,EAkHX;IAAC,QAAQ,yCAAT;IAAoD,WAAW,CAAC,OAAD;EAA/D,CAlHW,EAmHX;IAAC,QAAQ,yCAAT;IAAoD,WAAW,CAAC,SAAD;EAA/D,CAnHW,EAoHX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAC,yCAAD,CAA/C;IAA4F,eAAeA;EAA3G,CApHW,EAqHX;IAAC,QAAQ,mCAAT;IAA8C,WAAW,CAAC,oCAAD;EAAzD,CArHW,EAsHX;IAAC,QAAQ,mCAAT;IAA8C,WAAW,CAAC,UAAD;EAAzD,CAtHW,EAuHX;IAAC,QAAQ,mBAAT;IAA8B,WAAW,CAAC,mCAAD,CAAzC;IAAgF,eAAeA;EAA/F,CAvHW,EAwHX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,iBAAD;EAA1E,CAxHW,EAyHX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,eAAD;EAA1E,CAzHW,EA0HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,iBAAD;EAA1E,CA1HW,EA2HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,aAAD;EAA1E,CA3HW,EA4HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,cAAD;EAA1E,CA5HW,EA6HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,iBAAD;EAA1E,CA7HW,EA8HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,UAAD;EAA1E,CA9HW,EA+HX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,YAAD;EAA1E,CA/HW,EAgIX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,WAAD;EAA1E,CAhIW,EAiIX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,SAAD;EAA1E,CAjIW,EAkIX;IAAC,QAAQ,oDAAT;IAA+D,WAAW,CAAC,SAAD;EAA1E,CAlIW,EAmIX;IAAC,QAAQ,oCAAT;IAA+C,WAAW,CAAC,oDAAD,CAA1D;IAAkH,eAAeA;EAAjI,CAnIW,EAoIX;IAAC,QAAQ,iBAAT;IAA4B,WAAW,CAAEH,KAAK,CAAC6B,GAAN,CAAU,kBAAV,IAAgC;MAACtB,IAAI,EAAE;IAAP,CAAhC,GAA6DoD,gBAA/D,EAAkF,GAAlF,EAAuF,iBAAvF,CAAvC;IAAkJ,eAC9I;MAAA;MAAA,IAAEC,UAAF;MAAA,IAAcpB,CAAd;MAAA,IAAiBqB,QAAjB;;MAAA,OAAgC;QAC9BtD,IAAI,EAAEC,aAAA,CAASsD,eADe;QAE9BC,KAAK,EAAE7C,mBAAmB,CAAC;UAAEX,IAAI,EAAEC,aAAA,CAASwD,UAAjB;UAA6BrD,IAAI,EAAEiD,UAAU,CAACjD;QAA9C,CAAD,EAAsD6B,CAAtD,CAFI;QAG9ByB,WAAW,EAAEJ;MAHiB,CAAhC;IAAA;EADJ,CApIW,EA2IX;IAAC,QAAQ,iBAAT;IAA4B,WAAW,CAAE7D,KAAK,CAAC6B,GAAN,CAAU,eAAV,IAA6B;MAACtB,IAAI,EAAE;IAAP,CAA7B,GAAuD2D,aAAzD,EAAyE,GAAzE,EAA8E,iBAA9E,CAAvC;IAAyI,eACrI;MAAA;MAAA,IAAEN,UAAF;MAAA,IAAcpB,CAAd;MAAA,IAAiBqB,QAAjB;;MAAA,OAAgC;QAC9BtD,IAAI,EAAEC,aAAA,CAASsD,eADe;QAE9BC,KAAK,EAAE7C,mBAAmB,CAACb,aAAa,CAACuD,UAAD,CAAd,EAA4BpB,CAA5B,CAFI;QAG9ByB,WAAW,EAAEJ;MAHiB,CAAhC;IAAA;EADJ,CA3IW,EAkJX;IAAC,QAAQ,eAAT;IAA0B,WAAW,CAAE7D,KAAK,CAAC6B,GAAN,CAAU,wBAAV,IAAsC;MAACtB,IAAI,EAAE;IAAP,CAAtC,GAAyE4D,sBAA3E,EAAoG,GAApG,EAAyG,aAAzG,CAArC;IAA8J,eAC1J;MAAA;MAAA,IAAEjB,SAAF;MAAA,IAAaV,CAAb;MAAA,IAAgB4B,MAAhB;;MAAA,OAA6B;QAC3B7D,IAAI,EAAEC,aAAA,CAAS6D,aADY;QAE3BvB,IAAI,EAAE5B,mBAAmB,CAACb,aAAa,CAAC6C,SAAD,CAAd,EAA2BV,CAA3B,CAFE;QAG3ByB,WAAW,EAAEG;MAHc,CAA7B;IAAA;EADJ,CAlJW,EAyJX;IAAC,QAAQ,aAAT;IAAwB,WAAW,CAAC;MAAC,WAAU;IAAX,CAAD,EAAkB,wBAAlB,EAA4C;MAAC,WAAU;IAAX,CAA5C,CAAnC;IAAiG,eAC7F;MAAA;MAAA,IAAEE,IAAF;MAAA,IAAQ3C,QAAR;MAAA,IAAkB4C,KAAlB;;MAAA,OAA8B;QAC5BhE,IAAI,EAAEC,aAAA,CAASyD,WADa;QAE5BtC,QAAQ,EAAEA,QAFkB;QAG5B6C,SAAS,EAAE,GAHiB;QAI5BC,UAAU,EAAE;MAJgB,CAA9B;IAAA;EADJ,CAzJW,EAiKX;IAAC,QAAQ,qBAAT;IAAgC,WAAW;EAA3C,CAjKW,EAkKX;IAAC,QAAQ,qBAAT;IAAgC,WAAW,CAAC,qBAAD,EAAwB,YAAxB,CAA3C;IAAkF,eAAe,qBAAC1E,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAjG,CAlKW,EAmKX;IAAC,QAAQ,cAAT;IAAyB,WAAW,CAAC;MAAC,WAAU;IAAX,CAAD,EAAkB,qBAAlB,EAAyC;MAAC,WAAU;IAAX,CAAzC,CAApC;IAA+F,eAC3F;MAAA;MAAA,IAAEuE,IAAF;MAAA,IAAQ3C,QAAR;MAAA,IAAkB4C,KAAlB;;MAAA,OAA8B;QAC5BhE,IAAI,EAAEC,aAAA,CAASyD,WADa;QAE5BtC,QAAQ,EAAEA,QAFkB;QAG5B6C,SAAS,EAAE,GAHiB;QAI5BC,UAAU,EAAE;MAJgB,CAA9B;IAAA;EADJ,CAnKW,EA2KX;IAAC,QAAQ,wBAAT;IAAmC,WAAW;EAA9C,CA3KW,EA4KX;IAAC,QAAQ,wBAAT;IAAmC,WAAW,CAAC,wBAAD,EAA2B,YAA3B,CAA9C;IAAwF,eAAe,qBAAC1E,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAvG,CA5KW,EA6KX;IAAC,QAAQ,iBAAT;IAA4B,WAAW,CAAC;MAAC,WAAU;IAAX,CAAD,EAAkB,wBAAlB,EAA4C;MAAC,WAAU;IAAX,CAA5C,CAAvC;IAAqG,eACjG;MAAA;MAAA,IAAEuE,IAAF;MAAA,IAAQ3C,QAAR;MAAA,IAAkB4C,KAAlB;;MAAA,OAA8B;QAC5BhE,IAAI,EAAEC,aAAA,CAASyD,WADa;QAE5BtC,QAAQ,EAAEA,QAFkB;QAG5B6C,SAAS,EAAE,GAHiB;QAI5BC,UAAU,EAAE;MAJgB,CAA9B;IAAA;EADJ,CA7KW,EAqLX;IAAC,QAAQ,iCAAT;IAA4C,WAAW,CAAC,YAAD;EAAvD,CArLW,EAsLX;IAAC,QAAQ,iCAAT;IAA4C,WAAW,CAAC,iBAAD;EAAvD,CAtLW,EAuLX;IAAC,QAAQ,iCAAT;IAA4C,WAAW,CAAC,sBAAD;EAAvD,CAvLW,EAwLX;IAAC,QAAQ,iBAAT;IAA4B,WAAW,CAAC,mBAAD,EAAsB,GAAtB,EAA4BzE,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmCmE,GAA/D,EAAqE,GAArE,EAA0E,iCAA1E,CAAvC;IAAqJ,eACjJ;IACA;IACA;IACA;IACA,6BAAuC;MAAA;MAAA,IAArCC,MAAqC;MAAA,IAA7BC,EAA6B;MAAA,IAAzBC,GAAyB;MAAA,IAApBC,EAAoB;MAAA;MAAA,IAAfC,QAAe;;MACrC,OAAO;QACLxE,IAAI,EAAEC,aAAA,CAASwE,eADV;QAELL,MAAM,EAAEzD,mBAAmB,CAACyD,MAAD,EAASC,EAAT,CAFtB;QAGLG,QAAQ,EAAElE,kBAAkB,CAACkE,QAAD,EAAWD,EAAX;MAHvB,CAAP;IAKD;EAXL,CAxLW,EAqMX;IAAC,QAAQ,mBAAT;IAA8B,WAAW,CAAE9E,KAAK,CAAC6B,GAAN,CAAU,SAAV,IAAuB;MAACtB,IAAI,EAAE;IAAP,CAAvB,GAA2C0E,OAA7C,EAAuD,GAAvD,EAA4D,mBAA5D,EAAiF,GAAjF,EAAuFjF,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmC2E,GAA1H,EAAgI,GAAhI,EAAqI,mBAArI,CAAzC;IAAoM,eAChM;MAAA;MAAA,IAAEC,YAAF;MAAA,IAAgBP,EAAhB;MAAA,IAAoBQ,KAApB;MAAA,IAA2BN,EAA3B;MAAA,IAA+BO,QAA/B;MAAA,IAAyCC,EAAzC;MAAA,IAA6CC,KAA7C;;MAAA,OAAyD;QACvDhF,IAAI,EAAEC,aAAA,CAASgF,iBADwC;QAEvDC,OAAO,EAAEpF,aAAa,CAAC8E,YAAD,CAFiC;QAGvDC,KAAK,EAAE,CAAClE,mBAAmB,CAACL,kBAAkB,CAACuE,KAAD,EAAQR,EAAR,CAAnB,EAAgCE,EAAhC,CAApB,CAHgD;QAIvDY,GAAG,EAAErF,aAAa,CAACgF,QAAD,CAJqC;QAKvDE,KAAK,EAAE,CAAC1E,kBAAkB,CAAC0E,KAAD,EAAQD,EAAR,CAAnB;MALgD,CAAzD;IAAA;EADJ,CArMW,EA8MX;IAAC,QAAQ,uBAAT;IAAkC,WAAW,CAAEtF,KAAK,CAAC6B,GAAN,CAAU,OAAV,IAAqB;MAACtB,IAAI,EAAE;IAAP,CAArB,GAAuC8B,KAAzC;EAA7C,CA9MW,EA+MX;IAAC,QAAQ,OAAT;IAAkB,WAAW,CAAC,uBAAD,CAA7B;IAAwD,eAAe;MAAA;MAAA;MAAA,IAAG/B,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAASmC;MAAjB,CAAhB;IAAA;EAAvE,CA/MW,EAgNX;IAAC,QAAQ,0BAAT;IAAqC,WAAW,CAAE3C,KAAK,CAAC6B,GAAN,CAAU,UAAV,IAAwB;MAACtB,IAAI,EAAE;IAAP,CAAxB,GAA6C8C,QAA/C;EAAhD,CAhNW,EAiNX;IAAC,QAAQ,UAAT;IAAqB,WAAW,CAAC,0BAAD,CAAhC;IAA8D,eAAe;MAAA;MAAA;MAAA,IAAG/C,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAASmF,QAAjB;QAA2BhF,IAAI,EAAEL,KAAK,CAACK;MAAvC,CAAhB;IAAA;EAA7E,CAjNW,EAkNX;IAAC,QAAQ,0BAAT;IAAqC,WAAW,CAAEX,KAAK,CAAC6B,GAAN,CAAU,UAAV,IAAwB;MAACtB,IAAI,EAAE;IAAP,CAAxB,GAA6CqF,QAA/C;EAAhD,CAlNW,EAmNX;IAAC,QAAQ,UAAT;IAAqB,WAAW,CAAC,0BAAD,CAAhC;IAA8D,eAAe;MAAA;MAAA;MAAA,IAAGtF,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAASmF,QAAjB;QAA2BhF,IAAI,EAAEL,KAAK,CAACK;MAAvC,CAAhB;IAAA;EAA7E,CAnNW,EAoNX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAEX,KAAK,CAAC6B,GAAN,CAAU,YAAV,IAA0B;MAACtB,IAAI,EAAE;IAAP,CAA1B,GAAiDsF,UAAnD;EAAlD,CApNW,EAqNX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAE7F,KAAK,CAAC6B,GAAN,CAAU,mBAAV,IAAiC;MAACtB,IAAI,EAAE;IAAP,CAAjC,GAA+DuF,iBAAjE;EAAlD,CArNW,EAsNX;IAAC,QAAQ,4BAAT;IAAuC,WAAW,CAAE9F,KAAK,CAAC6B,GAAN,CAAU,UAAV,IAAwB;MAACtB,IAAI,EAAE;IAAP,CAAxB,GAA6CwF,QAA/C;EAAlD,CAtNW,EAuNX;IAAC,QAAQ,YAAT;IAAuB,WAAW,CAAC,4BAAD,CAAlC;IAAkE,eAAe;MAAA;MAAA;MAAA,IAAGzF,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAASwD,UAAjB;QAA6BrD,IAAI,EAAEL,KAAK,CAACK;MAAzC,CAAhB;IAAA;EAAjF,CAvNW,EAwNX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAEX,KAAK,CAAC6B,GAAN,CAAU,iBAAV,IAA+B;MAACtB,IAAI,EAAE;IAAP,CAA/B,GAA2DyF,eAA7D;EAAjD,CAxNW,EAyNX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAEhG,KAAK,CAAC6B,GAAN,CAAU,kBAAV,IAAgC;MAACtB,IAAI,EAAE;IAAP,CAAhC,GAA6D0F,gBAA/D;EAAjD,CAzNW,EA0NX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAEjG,KAAK,CAAC6B,GAAN,CAAU,oBAAV,IAAkC;MAACtB,IAAI,EAAE;IAAP,CAAlC,GAAiE2F,kBAAnE;EAAjD,CA1NW,EA2NX;IAAC,QAAQ,2BAAT;IAAsC,WAAW,CAAElG,KAAK,CAAC6B,GAAN,CAAU,sBAAV,IAAoC;MAACtB,IAAI,EAAE;IAAP,CAApC,GAAqE4F,oBAAvE;EAAjD,CA3NW,EA4NX;IAAC,QAAQ,WAAT;IAAsB,WAAW,CAAC,2BAAD,CAAjC;IAAgE,eAAe;MAAA;MAAA;MAAA,IAAG7F,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAAS4F,SAAjB;QAA4BC,GAAG,EAAE/F,KAAK,CAAC+F,GAAvC;QAA4C1F,IAAI,EAAEL,KAAK,CAACK;MAAxD,CAAhB;IAAA;EAA/E,CA5NW,EA6NX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAEX,KAAK,CAAC6B,GAAN,CAAU,QAAV,IAAsB;MAACtB,IAAI,EAAE;IAAP,CAAtB,GAAyC+F,MAA3C;EAA/C,CA7NW,EA8NX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAEtG,KAAK,CAAC6B,GAAN,CAAU,QAAV,IAAsB;MAACtB,IAAI,EAAE;IAAP,CAAtB,GAAyCgG,MAA3C;EAA/C,CA9NW,EA+NX;IAAC,QAAQ,SAAT;IAAoB,WAAW,CAAC,yBAAD,CAA/B;IAA4D,eAAe;MAAA;MAAA;MAAA,IAAGjG,KAAH;;MAAA,OAAgB;QAAEC,IAAI,EAAEC,aAAA,CAASgG,OAAjB;QAA0B7F,IAAI,EAAEL,KAAK,CAACK;MAAtC,CAAhB;IAAA;EAA3E,CA/NW,EAgOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAEX,KAAK,CAAC6B,GAAN,CAAU,kBAAV,IAAgC;MAACtB,IAAI,EAAE;IAAP,CAAhC,GAA6DkG,gBAA/D;EAA/C,CAhOW,EAiOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAEzG,KAAK,CAAC6B,GAAN,CAAU,iBAAV,IAA+B;MAACtB,IAAI,EAAE;IAAP,CAA/B,GAA2DmG,eAA7D;EAA/C,CAjOW,EAkOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE1G,KAAK,CAAC6B,GAAN,CAAU,2BAAV,IAAyC;MAACtB,IAAI,EAAE;IAAP,CAAzC,GAA+EoG,yBAAjF;EAA/C,CAlOW,EAmOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE3G,KAAK,CAAC6B,GAAN,CAAU,eAAV,IAA6B;MAACtB,IAAI,EAAE;IAAP,CAA7B,GAAuDqG,aAAzD;EAA/C,CAnOW,EAoOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE5G,KAAK,CAAC6B,GAAN,CAAU,MAAV,IAAoB;MAACtB,IAAI,EAAE;IAAP,CAApB,GAAqCsG,IAAvC;EAA/C,CApOW,EAqOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE7G,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmCuG,GAArC;EAA/C,CArOW,EAsOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE9G,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmC2E,GAArC;EAA/C,CAtOW,EAuOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAElF,KAAK,CAAC6B,GAAN,CAAU,IAAV,IAAkB;MAACtB,IAAI,EAAE;IAAP,CAAlB,GAAiCwG,EAAnC;EAA/C,CAvOW,EAwOX;IAAC,QAAQ,yBAAT;IAAoC,WAAW,CAAE/G,KAAK,CAAC6B,GAAN,CAAU,KAAV,IAAmB;MAACtB,IAAI,EAAE;IAAP,CAAnB,GAAmCyG,GAArC;EAA/C,CAxOW,EAyOX;IAAC,QAAQ,SAAT;IAAoB,WAAW,CAAC,yBAAD,CAA/B;IAA4D,eACxD;MAAA;MAAA;MAAA,IAAG1G,KAAH;;MAAA,OAAeD,aAAa,CAACC,KAAD,CAA5B;IAAA;EADJ,CAzOW,EA4OX;IAAC,QAAQ,UAAT;IAAqB,WAAW;EAAhC,CA5OW,EA6OX;IAAC,QAAQ,UAAT;IAAqB,WAAW,CAAC,UAAD,EAAa,SAAb,CAAhC;IAAyD,eAAe,qBAACP,CAAD;MAAA,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAKwB,MAAL,CAAY,CAACxB,CAAC,CAAC,CAAD,CAAF,CAAZ,CAAP;IAAA;EAAxE,CA7OW,EA8OX;IAAC,QAAQ,GAAT;IAAc,WAAW,CAAC,UAAD,CAAzB;IAAuC,eAAe;MAAA;MAAA,IAAEgB,QAAF;;MAAA,OAAgBA,QAAhB;IAAA;EAAtD,CA9OW,EA+OX;IAAC,QAAQ,SAAT;IAAoB,WAAW,CAAEf,KAAK,CAAC6B,GAAN,CAAU,cAAV,IAA4B;MAACtB,IAAI,EAAE;IAAP,CAA5B,GAAqD0G,YAAvD,CAA/B;IAAsG,eAClG;MAAA;MAAA,IAAE3G,KAAF;;MAAA,OAAc;QACZC,IAAI,EAAEC,aAAA,CAAS0G,YADH;QAEZvG,IAAI,EAAEL,KAAK,CAACK,IAFA;QAGZwG,mBAAmB,EAAE7G,KAAK,CAAC6G;MAHf,CAAd;IAAA;EADJ,CA/OW,EAsPX;IAAC,QAAQ,SAAT;IAAoB,WAAW,CAAEnH,KAAK,CAAC6B,GAAN,CAAU,eAAV,IAA6B;MAACtB,IAAI,EAAE;IAAP,CAA7B,GAAuD6G,aAAzD,CAA/B;IAAyG,eACrG;MAAA;MAAA,IAAE9G,KAAF;;MAAA,OAAc;QAAEC,IAAI,EAAEC,aAAA,CAAS6G,aAAjB;QAAgC1G,IAAI,EAAEL,KAAK,CAACK;MAA5C,CAAd;IAAA;EADJ,CAtPW,CAFU;EA4PvB2G,WAAW,EAAE;AA5PU,CAAzB;eA+PelG,O"}