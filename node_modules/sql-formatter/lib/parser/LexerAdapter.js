"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lineColFromIndex2 = require("../lexer/lineColFromIndex");

var _token = require("../lexer/token");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LexerAdapter = /*#__PURE__*/function () {
  function LexerAdapter(tokenize) {
    _classCallCheck(this, LexerAdapter);

    this.tokenize = tokenize;

    _defineProperty(this, "index", 0);

    _defineProperty(this, "tokens", []);

    _defineProperty(this, "input", '');
  }

  _createClass(LexerAdapter, [{
    key: "reset",
    value: function reset(chunk, _info) {
      this.input = chunk;
      this.index = 0;
      this.tokens = this.tokenize(chunk);
    }
  }, {
    key: "next",
    value: function next() {
      return this.tokens[this.index++];
    }
  }, {
    key: "save",
    value: function save() {}
  }, {
    key: "formatError",
    value: function formatError(token) {
      var _lineColFromIndex = (0, _lineColFromIndex2.lineColFromIndex)(this.input, token.start),
          line = _lineColFromIndex.line,
          col = _lineColFromIndex.col;

      return "Parse error at token: ".concat(token.text, " at line ").concat(line, " column ").concat(col);
    }
  }, {
    key: "has",
    value: function has(name) {
      return name in _token.TokenType;
    }
  }]);

  return LexerAdapter;
}();

exports["default"] = LexerAdapter;
module.exports = exports.default;
//# sourceMappingURL=LexerAdapter.js.map