import BigQueryFormatter from "./languages/bigquery/bigquery.formatter";
import Db2Formatter from "./languages/db2/db2.formatter";
import HiveFormatter from "./languages/hive/hive.formatter";
import MariaDbFormatter from "./languages/mariadb/mariadb.formatter";
import MySqlFormatter from "./languages/mysql/mysql.formatter";
import N1qlFormatter from "./languages/n1ql/n1ql.formatter";
import PlSqlFormatter from "./languages/plsql/plsql.formatter";
import PostgreSqlFormatter from "./languages/postgresql/postgresql.formatter";
import RedshiftFormatter from "./languages/redshift/redshift.formatter";
import SparkFormatter from "./languages/spark/spark.formatter";
import SqliteFormatter from "./languages/sqlite/sqlite.formatter";
import SqlFormatter from "./languages/sql/sql.formatter";
import TrinoFormatter from "./languages/trino/trino.formatter";
import TransactSqlFormatter from "./languages/transactsql/transactsql.formatter";
import SingleStoreDbFormatter from './languages/singlestoredb/singlestoredb.formatter';
import { FormatOptions } from './FormatOptions';
export declare const formatters: {
    bigquery: typeof BigQueryFormatter;
    db2: typeof Db2Formatter;
    hive: typeof HiveFormatter;
    mariadb: typeof MariaDbFormatter;
    mysql: typeof MySqlFormatter;
    n1ql: typeof N1qlFormatter;
    plsql: typeof PlSqlFormatter;
    postgresql: typeof PostgreSqlFormatter;
    redshift: typeof RedshiftFormatter;
    singlestoredb: typeof SingleStoreDbFormatter;
    spark: typeof SparkFormatter;
    sql: typeof SqlFormatter;
    sqlite: typeof SqliteFormatter;
    transactsql: typeof TransactSqlFormatter;
    trino: typeof TrinoFormatter;
    tsql: typeof TransactSqlFormatter;
};
export declare type SqlLanguage = keyof typeof formatters;
export declare const supportedDialects: string[];
/**
 * Format whitespace in a query to make it easier to read.
 *
 * @param {string} query - input SQL query string
 * @param {FormatOptions} cfg Configuration options (see docs in README)
 * @return {string} formatted query
 */
export declare const format: (query: string, cfg?: Partial<FormatOptions>) => string;
export declare class ConfigError extends Error {
}
export declare type FormatFn = typeof format;
