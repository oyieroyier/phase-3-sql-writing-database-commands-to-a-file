import { FormatOptions } from "../FormatOptions";
import Params from "./Params";
import { AstNode } from "../parser/ast";
import Layout from './Layout';
interface ExpressionFormatterParams {
    cfg: FormatOptions;
    params: Params;
    layout: Layout;
    inline?: boolean;
}
/** Formats a generic SQL expression */
export default class ExpressionFormatter {
    private cfg;
    private params;
    private layout;
    private inline;
    private nodes;
    private index;
    constructor({ cfg, params, layout, inline }: ExpressionFormatterParams);
    format(nodes: AstNode[]): Layout;
    private formatNode;
    private formatNodeWithoutComments;
    private formatFunctionCall;
    private formatArraySubscript;
    private formatPropertyAccess;
    private formatParenthesis;
    private formatBetweenPredicate;
    private formatClause;
    private formatSetOperation;
    private formatLimitClause;
    private formatAllColumnsAsterisk;
    private formatLiteral;
    private formatIdentifier;
    private formatParameter;
    private formatOperator;
    private formatComma;
    private withComments;
    private formatComments;
    private formatLineComment;
    private formatBlockComment;
    private splitBlockComment;
    private formatSubExpression;
    private formatInlineExpression;
    private formatKeywordNode;
    private formatJoin;
    private formatKeyword;
    private formatDependentClause;
    private formatLogicalOperator;
    private formatCaseStart;
    private formatCaseEnd;
    private formatMultilineBlockEnd;
    private showKw;
    private showNonTabularKw;
}
export {};
