{"version":3,"file":"sqlFormatter.js","names":["formatters","bigquery","BigQueryFormatter","db2","Db2Formatter","hive","HiveFormatter","mariadb","MariaDbFormatter","mysql","MySqlFormatter","n1ql","N1qlFormatter","plsql","PlSqlFormatter","postgresql","PostgreSqlFormatter","redshift","RedshiftFormatter","singlestoredb","SingleStoreDbFormatter","spark","SparkFormatter","sql","SqlFormatter","sqlite","SqliteFormatter","transactsql","TransactSqlFormatter","trino","TrinoFormatter","tsql","supportedDialects","Object","keys","defaultOptions","language","tabWidth","useTabs","keywordCase","indentStyle","logicalOperatorNewline","tabulateAlias","commaPosition","expressionWidth","linesBetweenQueries","denseOperators","newlineBeforeSemicolon","format","query","cfg","Error","options","validateConfig","FormatterCls","ConfigError","includes","params","validateParams","console","warn","paramValues","Array","values","every","p"],"sources":["../src/sqlFormatter.ts"],"sourcesContent":["import BigQueryFormatter from 'src/languages/bigquery/bigquery.formatter';\nimport Db2Formatter from 'src/languages/db2/db2.formatter';\nimport HiveFormatter from 'src/languages/hive/hive.formatter';\nimport MariaDbFormatter from 'src/languages/mariadb/mariadb.formatter';\nimport MySqlFormatter from 'src/languages/mysql/mysql.formatter';\nimport N1qlFormatter from 'src/languages/n1ql/n1ql.formatter';\nimport PlSqlFormatter from 'src/languages/plsql/plsql.formatter';\nimport PostgreSqlFormatter from 'src/languages/postgresql/postgresql.formatter';\nimport RedshiftFormatter from 'src/languages/redshift/redshift.formatter';\nimport SparkFormatter from 'src/languages/spark/spark.formatter';\nimport SqliteFormatter from 'src/languages/sqlite/sqlite.formatter';\nimport SqlFormatter from 'src/languages/sql/sql.formatter';\nimport TrinoFormatter from 'src/languages/trino/trino.formatter';\nimport TransactSqlFormatter from 'src/languages/transactsql/transactsql.formatter';\nimport SingleStoreDbFormatter from './languages/singlestoredb/singlestoredb.formatter';\n\nimport { FormatOptions } from './FormatOptions';\nimport { ParamItems } from './formatter/Params';\n\nexport const formatters = {\n  bigquery: BigQueryFormatter,\n  db2: Db2Formatter,\n  hive: HiveFormatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  singlestoredb: SingleStoreDbFormatter,\n  spark: SparkFormatter,\n  sql: SqlFormatter,\n  sqlite: SqliteFormatter,\n  transactsql: TransactSqlFormatter,\n  trino: TrinoFormatter,\n  tsql: TransactSqlFormatter, // alias for transactsql\n};\nexport type SqlLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nconst defaultOptions: FormatOptions = {\n  language: 'sql',\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  logicalOperatorNewline: 'before',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatOptions> = {}): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  const FormatterCls =\n    typeof options.language === 'string' ? formatters[options.language] : options.language;\n\n  return new FormatterCls(options).format(query);\n};\n\nexport class ConfigError extends Error {}\n\nfunction validateConfig(cfg: FormatOptions): FormatOptions {\n  if (typeof cfg.language === 'string' && !supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  if ('multilineLists' in cfg) {\n    throw new ConfigError('multilineLists config is no more supported.');\n  }\n  if ('newlineBeforeOpenParen' in cfg) {\n    throw new ConfigError('newlineBeforeOpenParen config is no more supported.');\n  }\n  if ('newlineBeforeCloseParen' in cfg) {\n    throw new ConfigError('newlineBeforeCloseParen config is no more supported.');\n  }\n  if ('aliasAs' in cfg) {\n    throw new ConfigError('aliasAs config is no more supported.');\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.commaPosition === 'before' && cfg.useTabs) {\n    throw new ConfigError(\n      'commaPosition: before does not work when tabs are used for indentation.'\n    );\n  }\n\n  if (cfg.params && !validateParams(cfg.params)) {\n    // eslint-disable-next-line no-console\n    console.warn('WARNING: All \"params\" option values should be strings.');\n  }\n\n  return cfg;\n}\n\nfunction validateParams(params: ParamItems | string[]): boolean {\n  const paramValues = params instanceof Array ? params : Object.values(params);\n  return paramValues.every(p => typeof p === 'string');\n}\n\nexport type FormatFn = typeof format;\n"],"mappings":"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"}