"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lineColFromIndex2 = require("./lineColFromIndex");

var _regexUtil = require("./regexUtil");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TokenizerEngine = /*#__PURE__*/function () {
  // The input SQL string to process
  // Current position in string
  function TokenizerEngine(rules) {
    _classCallCheck(this, TokenizerEngine);

    this.rules = rules;

    _defineProperty(this, "input", '');

    _defineProperty(this, "index", 0);
  }
  /**
   * Takes a SQL string and breaks it into tokens.
   * Each token is an object with type and value.
   *
   * @param {string} input - The SQL string
   * @returns {Token[]} output token stream
   */


  _createClass(TokenizerEngine, [{
    key: "tokenize",
    value: function tokenize(input) {
      this.input = input;
      this.index = 0;
      var tokens = [];
      var token; // Keep processing the string until end is reached

      while (this.index < this.input.length) {
        // skip any preceding whitespace
        var precedingWhitespace = this.getWhitespace();

        if (this.index < this.input.length) {
          // Get the next token and the token type
          token = this.getNextToken();

          if (!token) {
            throw this.createParseError();
          }

          tokens.push(_objectSpread(_objectSpread({}, token), {}, {
            precedingWhitespace: precedingWhitespace
          }));
        }
      }

      return tokens;
    }
  }, {
    key: "createParseError",
    value: function createParseError() {
      var text = this.input.slice(this.index, this.index + 10);

      var _lineColFromIndex = (0, _lineColFromIndex2.lineColFromIndex)(this.input, this.index),
          line = _lineColFromIndex.line,
          col = _lineColFromIndex.col;

      return new Error("Parse error: Unexpected \"".concat(text, "\" at line ").concat(line, " column ").concat(col));
    }
  }, {
    key: "getWhitespace",
    value: function getWhitespace() {
      _regexUtil.WHITESPACE_REGEX.lastIndex = this.index;

      var matches = _regexUtil.WHITESPACE_REGEX.exec(this.input);

      if (matches) {
        // Advance current position by matched whitespace length
        this.index += matches[0].length;
        return matches[0];
      }

      return undefined;
    }
  }, {
    key: "getNextToken",
    value: function getNextToken() {
      var _iterator = _createForOfIteratorHelper(this.rules),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var rule = _step.value;
          var token = this.match(rule);

          if (token) {
            return token;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return undefined;
    } // Attempts to match token rule regex at current position in input

  }, {
    key: "match",
    value: function match(rule) {
      rule.regex.lastIndex = this.index;
      var matches = rule.regex.exec(this.input);

      if (matches) {
        var matchedText = matches[0];
        var token = {
          type: rule.type,
          raw: matchedText,
          text: rule.text ? rule.text(matchedText) : matchedText,
          start: this.index
        };

        if (rule.key) {
          token.key = rule.key(matchedText);
        } // Advance current position by matched token length


        this.index += matchedText.length;
        return token;
      }

      return undefined;
    }
  }]);

  return TokenizerEngine;
}();

exports["default"] = TokenizerEngine;
module.exports = exports.default;
//# sourceMappingURL=TokenizerEngine.js.map