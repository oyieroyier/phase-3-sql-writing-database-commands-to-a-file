"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disambiguateTokens = disambiguateTokens;

var _token = require("./token");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Ensures that no keyword token (RESERVED_*) is preceded by dot (.).
 *
 * Ensures that all RESERVED_FUNCTION_NAME tokens are followed by "(".
 * If they're not, converts the token to RESERVED_KEYWORD.
 *
 * When IDENTIFIER and RESERVED_KEYWORD token is followed by "["
 * converts it to ARRAY_IDENTIFIER or ARRAY_KEYWORD accordingly.
 *
 * This is needed to avoid ambiguity in parser which expects function names
 * to always be followed by open-paren, and to distinguish between
 * array accessor `foo[1]` and array literal `[1, 2, 3]`.
 */
function disambiguateTokens(tokens) {
  return tokens.map(dotKeywordToIdent).map(funcNameToKeyword).map(identToArrayIdent).map(keywordToArrayKeyword);
}

var dotKeywordToIdent = function dotKeywordToIdent(token, i, tokens) {
  if ((0, _token.isReserved)(token.type)) {
    var prevToken = prevNonCommentToken(tokens, i);

    if (prevToken && prevToken.text === '.') {
      return _objectSpread(_objectSpread({}, token), {}, {
        type: _token.TokenType.IDENTIFIER,
        text: token.raw
      });
    }
  }

  return token;
};

var funcNameToKeyword = function funcNameToKeyword(token, i, tokens) {
  if (token.type === _token.TokenType.RESERVED_FUNCTION_NAME) {
    var nextToken = nextNonCommentToken(tokens, i);

    if (!nextToken || !isOpenParen(nextToken)) {
      return _objectSpread(_objectSpread({}, token), {}, {
        type: _token.TokenType.RESERVED_KEYWORD
      });
    }
  }

  return token;
};

var identToArrayIdent = function identToArrayIdent(token, i, tokens) {
  if (token.type === _token.TokenType.IDENTIFIER) {
    var nextToken = nextNonCommentToken(tokens, i);

    if (nextToken && isOpenBracket(nextToken)) {
      return _objectSpread(_objectSpread({}, token), {}, {
        type: _token.TokenType.ARRAY_IDENTIFIER
      });
    }
  }

  return token;
};

var keywordToArrayKeyword = function keywordToArrayKeyword(token, i, tokens) {
  if (token.type === _token.TokenType.RESERVED_KEYWORD) {
    var nextToken = nextNonCommentToken(tokens, i);

    if (nextToken && isOpenBracket(nextToken)) {
      return _objectSpread(_objectSpread({}, token), {}, {
        type: _token.TokenType.ARRAY_KEYWORD
      });
    }
  }

  return token;
};

var prevNonCommentToken = function prevNonCommentToken(tokens, index) {
  return nextNonCommentToken(tokens, index, -1);
};

var nextNonCommentToken = function nextNonCommentToken(tokens, index) {
  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var i = 1;

  while (tokens[index + i * dir] && isComment(tokens[index + i * dir])) {
    i++;
  }

  return tokens[index + i * dir];
};

var isOpenParen = function isOpenParen(t) {
  return t.type === _token.TokenType.OPEN_PAREN && t.text === '(';
};

var isOpenBracket = function isOpenBracket(t) {
  return t.type === _token.TokenType.OPEN_PAREN && t.text === '[';
};

var isComment = function isComment(t) {
  return t.type === _token.TokenType.BLOCK_COMMENT || t.type === _token.TokenType.LINE_COMMENT;
};
//# sourceMappingURL=disambiguateTokens.js.map