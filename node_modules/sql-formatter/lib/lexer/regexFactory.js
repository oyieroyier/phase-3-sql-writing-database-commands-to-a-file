"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.variable = exports.stringPattern = exports.string = exports.reservedWord = exports.quotePatterns = exports.parenthesis = exports.parameter = exports.operator = exports.lineComment = exports.identifierPattern = exports.identifier = void 0;

var _utils = require("../utils");

var _regexUtil = require("./regexUtil");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Builds a RegExp for valid line comments in a SQL dialect
 * @param {string[]} lineCommentTypes - list of character strings that denote line comments
 */
var lineComment = function lineComment(lineCommentTypes) {
  return new RegExp("(?:".concat(lineCommentTypes.map(_regexUtil.escapeRegExp).join('|'), ").*?(?=\r\n|\r|\n|$)"), 'uy');
};
/**
 * Builds a RegExp for matching either open- or close-parenthesis patterns
 */


exports.lineComment = lineComment;

var parenthesis = function parenthesis(kind) {
  var extraParens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var index = kind === 'open' ? 0 : 1;
  var parens = ['()'].concat(_toConsumableArray(extraParens)).map(function (pair) {
    return pair[index];
  });
  return (0, _regexUtil.patternToRegex)(parens.map(_regexUtil.escapeRegExp).join('|'));
};
/**
 * Builds a RegExp containing all operators for a SQL dialect
 */


exports.parenthesis = parenthesis;

var operator = function operator(operators) {
  return (0, _regexUtil.patternToRegex)("".concat((0, _utils.sortByLengthDesc)(operators).map(_regexUtil.escapeRegExp).join('|')));
}; // Negative lookahead to avoid matching a keyword that's actually part of identifier,
// which can happen when identifier allows word-boundary characters inside it.
//
// For example "SELECT$ME" should be tokenized as:
// - ["SELECT$ME"] when $ is allowed inside identifiers
// - ["SELECT", "$", "ME"] when $ can't be part of identifiers.


exports.operator = operator;

var rejectIdentCharsPattern = function rejectIdentCharsPattern(_ref) {
  var rest = _ref.rest,
      dashes = _ref.dashes;
  return rest || dashes ? "(?![".concat(rest || '').concat(dashes ? '-' : '', "])") : '';
};
/**
 * Builds a RegExp for all Reserved Keywords in a SQL dialect
 */


var reservedWord = function reservedWord(reservedKeywords) {
  var identChars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (reservedKeywords.length === 0) {
    return /^\b$/;
  }

  var avoidIdentChars = rejectIdentCharsPattern(identChars);
  var reservedKeywordsPattern = (0, _utils.sortByLengthDesc)(reservedKeywords).join('|').replace(/ /g, '\\s+');
  return new RegExp("(?:".concat(reservedKeywordsPattern, ")").concat(avoidIdentChars, "\\b"), 'iuy');
};
/**
 * Builds a RegExp for parameter placeholder patterns
 * @param {string[]} paramTypes - list of strings that denote placeholder types
 * @param {string} pattern - string that denotes placeholder pattern
 */


exports.reservedWord = reservedWord;

var parameter = function parameter(paramTypes, pattern) {
  if (!paramTypes.length) {
    return undefined;
  }

  var typesRegex = paramTypes.map(_regexUtil.escapeRegExp).join('|');
  return (0, _regexUtil.patternToRegex)("(?:".concat(typesRegex, ")(?:").concat(pattern, ")"));
};

exports.parameter = parameter;

var buildQStringPatterns = function buildQStringPatterns() {
  var specialDelimiterMap = {
    '<': '>',
    '[': ']',
    '(': ')',
    '{': '}'
  }; // base pattern for special delimiters, left must correspond with right

  var singlePattern = "{left}(?:(?!{right}').)*?{right}"; // replace {left} and {right} with delimiters, collect as array

  var patternList = Object.entries(specialDelimiterMap).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        left = _ref3[0],
        right = _ref3[1];

    return singlePattern.replace(/{left}/g, (0, _regexUtil.escapeRegExp)(left)).replace(/{right}/g, (0, _regexUtil.escapeRegExp)(right));
  });
  var specialDelimiters = (0, _regexUtil.escapeRegExp)(Object.keys(specialDelimiterMap).join('')); // standard pattern for common delimiters, ignores special delimiters

  var standardDelimiterPattern = String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral(["(?<tag>[^s", "])(?:(?!k<tag>').)*?k<tag>"], ["(?<tag>[^\\s", "])(?:(?!\\k<tag>').)*?\\k<tag>"])), specialDelimiters); // constructs final pattern by joining all cases

  var qStringPattern = "[Qq]'(?:".concat(standardDelimiterPattern, "|").concat(patternList.join('|'), ")'");
  return qStringPattern;
}; // Regex patterns for all supported quote styles.
//
// Most of them have a single escaping-style built in,
// but "" and '' support multiple versions of escapes,
// which must be selected with suffixes: -qq, -bs, -qq-bs, -raw


var quotePatterns = {
  // - backtick quoted (using `` to escape)
  '``': '(?:`[^`]*`)+',
  // - Transact-SQL square bracket quoted (using ]] to escape)
  '[]': String.raw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["(?:[[^]]*])(?:][^]]*])*"], ["(?:\\[[^\\]]*\\])(?:\\][^\\]]*\\])*"]))),
  // double-quoted
  '""-qq': String.raw(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["(?:\"[^\"]*\")+"]))),
  // with repeated quote escapes
  '""-bs': String.raw(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["(?:\"[^\"\\]*(?:\\.[^\"\\]*)*\")"], ["(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")"]))),
  // with backslash escapes
  '""-qq-bs': String.raw(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["(?:\"[^\"\\]*(?:\\.[^\"\\]*)*\")+"], ["(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")+"]))),
  // with repeated quote or backslash escapes
  '""-raw': String.raw(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["(?:\"[^\"]*\")"]))),
  // no escaping
  // single-quoted
  "''-qq": String.raw(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["(?:'[^']*')+"]))),
  // with repeated quote escapes
  "''-bs": String.raw(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["(?:'[^'\\]*(?:\\.[^'\\]*)*')"], ["(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"]))),
  // with backslash escapes
  "''-qq-bs": String.raw(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["(?:'[^'\\]*(?:\\.[^'\\]*)*')+"], ["(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')+"]))),
  // with repeated quote or backslash escapes
  "''-raw": String.raw(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["(?:'[^']*')"]))),
  // no escaping
  // PostgreSQL dollar-quoted
  '$$': String.raw(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["(?<tag>$w*$)[sS]*?k<tag>"], ["(?<tag>\\$\\w*\\$)[\\s\\S]*?\\k<tag>"]))),
  // BigQuery '''triple-quoted''' (using \' to escape)
  "'''..'''": String.raw(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["'''[^\\]*?(?:\\.[^\\]*?)*?'''"], ["'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?'''"]))),
  // BigQuery """triple-quoted""" (using \" to escape)
  '""".."""': String.raw(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\"\"\"[^\\]*?(?:\\.[^\\]*?)*?\"\"\""], ["\"\"\"[^\\\\]*?(?:\\\\.[^\\\\]*?)*?\"\"\""]))),
  // Hive and Spark variables: ${name}
  '{}': String.raw(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["(?:{[^}]*})"], ["(?:\\{[^\\}]*\\})"]))),
  // Oracle q'' strings: q'<text>' q'|text|' ...
  "q''": buildQStringPatterns()
};
exports.quotePatterns = quotePatterns;

var singleQuotePattern = function singleQuotePattern(quoteTypes) {
  if (typeof quoteTypes === 'string') {
    return quotePatterns[quoteTypes];
  } else {
    return (0, _regexUtil.prefixesPattern)(quoteTypes) + quotePatterns[quoteTypes.quote];
  }
};
/** Builds a RegExp for matching variables */


var variable = function variable(varTypes) {
  return (0, _regexUtil.patternToRegex)(varTypes.map(function (varType) {
    return 'regex' in varType ? varType.regex : singleQuotePattern(varType);
  }).join('|'));
};
/** Builds a quote-delimited pattern for matching all given quote types */


exports.variable = variable;

var stringPattern = function stringPattern(quoteTypes) {
  return quoteTypes.map(singleQuotePattern).join('|');
};
/** Builds a RegExp for matching quote-delimited patterns */


exports.stringPattern = stringPattern;

var string = function string(quoteTypes) {
  return (0, _regexUtil.patternToRegex)(stringPattern(quoteTypes));
};
/**
 * Builds a RegExp for valid identifiers in a SQL dialect
 */


exports.string = string;

var identifier = function identifier() {
  var specialChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _regexUtil.patternToRegex)(identifierPattern(specialChars));
};
/**
 * Builds a RegExp string for valid identifiers in a SQL dialect
 */


exports.identifier = identifier;

var identifierPattern = function identifierPattern() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      first = _ref4.first,
      rest = _ref4.rest,
      dashes = _ref4.dashes,
      allowFirstCharNumber = _ref4.allowFirstCharNumber;

  // Unicode letters, diacritical marks and underscore
  var letter = '\\p{Alphabetic}\\p{Mark}_'; // Numbers 0..9, plus various unicode numbers

  var number = '\\p{Decimal_Number}';
  var firstChars = (0, _regexUtil.escapeRegExp)(first !== null && first !== void 0 ? first : '');
  var restChars = (0, _regexUtil.escapeRegExp)(rest !== null && rest !== void 0 ? rest : '');
  var pattern = allowFirstCharNumber ? "[".concat(letter).concat(number).concat(firstChars, "][").concat(letter).concat(number).concat(restChars, "]*") : "[".concat(letter).concat(firstChars, "][").concat(letter).concat(number).concat(restChars, "]*");
  return dashes ? (0, _regexUtil.withDashes)(pattern) : pattern;
};

exports.identifierPattern = identifierPattern;
//# sourceMappingURL=regexFactory.js.map