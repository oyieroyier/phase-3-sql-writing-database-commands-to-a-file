"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NestedComment = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-cond-assign */
var START = new RegExp("\\/\\*", "y"); // matches: /*

var MIDDLE = new RegExp("((?:(?![\\*\\/])[\\s\\S])|\\*(?:(?!\\/)[\\s\\S])|\\/(?:(?!\\*)[\\s\\S]))+", "y"); // matches text NOT containing /* or */

var END = new RegExp("\\*\\/", "y"); // matches: */

/**
 * An object mimicking a regular expression,
 * for matching nested block-comments.
 */

var NestedComment = /*#__PURE__*/function () {
  function NestedComment() {
    _classCallCheck(this, NestedComment);

    _defineProperty(this, "lastIndex", 0);
  }

  _createClass(NestedComment, [{
    key: "exec",
    value: function exec(input) {
      var result = '';
      var match;
      var nestLevel = 0;

      if (match = this.matchSection(START, input)) {
        result += match;
        nestLevel++;
      } else {
        return null;
      }

      while (nestLevel > 0) {
        if (match = this.matchSection(START, input)) {
          result += match;
          nestLevel++;
        } else if (match = this.matchSection(END, input)) {
          result += match;
          nestLevel--;
        } else if (match = this.matchSection(MIDDLE, input)) {
          result += match;
        } else {
          return null;
        }
      }

      return [result];
    }
  }, {
    key: "matchSection",
    value: function matchSection(regex, input) {
      regex.lastIndex = this.lastIndex;
      var matches = regex.exec(input);

      if (matches) {
        this.lastIndex += matches[0].length;
      }

      return matches ? matches[0] : null;
    }
  }]);

  return NestedComment;
}();

exports.NestedComment = NestedComment;
//# sourceMappingURL=NestedComment.js.map