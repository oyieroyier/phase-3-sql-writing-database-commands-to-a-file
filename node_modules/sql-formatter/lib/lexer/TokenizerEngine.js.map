{"version":3,"file":"TokenizerEngine.js","names":["TokenizerEngine","rules","input","index","tokens","token","length","precedingWhitespace","getWhitespace","getNextToken","createParseError","push","text","slice","lineColFromIndex","line","col","Error","WHITESPACE_REGEX","lastIndex","matches","exec","undefined","rule","match","regex","matchedText","type","raw","start","key"],"sources":["../../src/lexer/TokenizerEngine.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport { lineColFromIndex } from './lineColFromIndex';\nimport { WHITESPACE_REGEX } from './regexUtil';\n\nexport interface RegExpLike {\n  lastIndex: number;\n  exec(input: string): string[] | null;\n}\n\nexport interface TokenRule {\n  type: TokenType;\n  // Normally a RegExp object.\n  // But to allow for more complex matching logic,\n  // an object can be given that implements a RegExpLike interface.\n  regex: RegExpLike;\n  // Called with the raw string that was matched\n  text?: (rawText: string) => string;\n  key?: (rawText: string) => string;\n}\n\nexport default class TokenizerEngine {\n  private input = ''; // The input SQL string to process\n  private index = 0; // Current position in string\n\n  constructor(private rules: TokenRule[]) {}\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  public tokenize(input: string): Token[] {\n    this.input = input;\n    this.index = 0;\n    const tokens: Token[] = [];\n    let token: Token | undefined;\n\n    // Keep processing the string until end is reached\n    while (this.index < this.input.length) {\n      // skip any preceding whitespace\n      const precedingWhitespace = this.getWhitespace();\n\n      if (this.index < this.input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken();\n        if (!token) {\n          throw this.createParseError();\n        }\n\n        tokens.push({ ...token, precedingWhitespace });\n      }\n    }\n    return tokens;\n  }\n\n  private createParseError(): Error {\n    const text = this.input.slice(this.index, this.index + 10);\n    const { line, col } = lineColFromIndex(this.input, this.index);\n    return new Error(`Parse error: Unexpected \"${text}\" at line ${line} column ${col}`);\n  }\n\n  private getWhitespace(): string | undefined {\n    WHITESPACE_REGEX.lastIndex = this.index;\n\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      // Advance current position by matched whitespace length\n      this.index += matches[0].length;\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  private getNextToken(): Token | undefined {\n    for (const rule of this.rules) {\n      const token = this.match(rule);\n      if (token) {\n        return token;\n      }\n    }\n    return undefined;\n  }\n\n  // Attempts to match token rule regex at current position in input\n  private match(rule: TokenRule): Token | undefined {\n    rule.regex.lastIndex = this.index;\n    const matches = rule.regex.exec(this.input);\n    if (matches) {\n      const matchedText = matches[0];\n\n      const token: Token = {\n        type: rule.type,\n        raw: matchedText,\n        text: rule.text ? rule.text(matchedText) : matchedText,\n        start: this.index,\n      };\n\n      if (rule.key) {\n        token.key = rule.key(matchedText);\n      }\n\n      // Advance current position by matched token length\n      this.index += matchedText.length;\n      return token;\n    }\n    return undefined;\n  }\n}\n"],"mappings":"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"}