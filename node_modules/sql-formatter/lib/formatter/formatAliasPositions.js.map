{"version":3,"file":"formatAliasPositions.js","names":["formatAliasPositions","query","lines","split","newQuery","i","length","match","aliasLines","push","splitLines","map","line","matches","precedingText","as","alias","aliasMaxLength","maxLength","replace","repeat","join"],"sources":["../../src/formatter/formatAliasPositions.ts"],"sourcesContent":["import { maxLength } from 'src/utils';\n\n/**\n * Handles select alias placement - tabulates if enabled\n */\nexport default function formatAliasPositions(query: string): string {\n  const lines = query.split('\\n');\n\n  let newQuery: string[] = [];\n  for (let i = 0; i < lines.length; i++) {\n    // find SELECT rows with trailing comma, if no comma (only one row) - no-op\n    if (lines[i].match(/^\\s*SELECT/i)) {\n      let aliasLines: string[] = [];\n      if (lines[i].match(/.*,$/)) {\n        aliasLines = [lines[i]]; // add select to aliasLines in case of tabular formats\n      } else {\n        newQuery.push(lines[i]); // add select to new query\n        if (lines[i].match(/^\\s*SELECT\\s+.+(?!,$)/i)) {\n          continue;\n        }\n        aliasLines.push(lines[++i]);\n      }\n\n      // get all lines in SELECT clause\n      while (lines[i++].match(/.*,$/)) {\n        aliasLines.push(lines[i]);\n      }\n\n      // break lines into alias with optional AS, and all preceding text\n      const splitLines = aliasLines\n        .map(line => ({ line, matches: line.match(/(^.*?\\S) (AS )?(\\S+,?$)/i) }))\n        .map(({ line, matches }) => {\n          if (!matches) {\n            return { precedingText: line };\n          }\n          return {\n            precedingText: matches[1],\n            as: matches[2],\n            alias: matches[3],\n          };\n        });\n\n      // get longest of precedingText, trim trailing comma for non-alias columns\n      const aliasMaxLength = maxLength(\n        splitLines.map(({ precedingText }) => precedingText.replace(/\\s*,\\s*$/, ''))\n      );\n      // re-construct line, aligning by inserting space before AS or alias\n      aliasLines = splitLines.map(\n        ({ precedingText, as, alias }) =>\n          precedingText +\n          (alias ? ' '.repeat(aliasMaxLength - precedingText.length + 1) + (as ?? '') + alias : '')\n      );\n      newQuery = [...newQuery, ...aliasLines];\n    }\n    newQuery.push(lines[i]);\n  }\n\n  return newQuery.join('\\n');\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACe,SAASA,oBAAT,CAA8BC,KAA9B,EAAqD;EAClE,IAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAd;EAEA,IAAIC,QAAkB,GAAG,EAAzB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC;IACA,IAAIH,KAAK,CAACG,CAAD,CAAL,CAASE,KAAT,CAAe,aAAf,CAAJ,EAAmC;MAAA;QACjC,IAAIC,UAAoB,GAAG,EAA3B;;QACA,IAAIN,KAAK,CAACG,CAAD,CAAL,CAASE,KAAT,CAAe,MAAf,CAAJ,EAA4B;UAC1BC,UAAU,GAAG,CAACN,KAAK,CAACG,CAAD,CAAN,CAAb,CAD0B,CACD;QAC1B,CAFD,MAEO;UACLD,QAAQ,CAACK,IAAT,CAAcP,KAAK,CAACG,CAAD,CAAnB,EADK,CACoB;;UACzB,IAAIH,KAAK,CAACG,CAAD,CAAL,CAASE,KAAT,CAAe,wBAAf,CAAJ,EAA8C;YAC5C;UACD;;UACDC,UAAU,CAACC,IAAX,CAAgBP,KAAK,CAAC,EAAEG,CAAH,CAArB;QACD,CAVgC,CAYjC;;;QACA,OAAOH,KAAK,CAACG,CAAC,EAAF,CAAL,CAAWE,KAAX,CAAiB,MAAjB,CAAP,EAAiC;UAC/BC,UAAU,CAACC,IAAX,CAAgBP,KAAK,CAACG,CAAD,CAArB;QACD,CAfgC,CAiBjC;;;QACA,IAAMK,UAAU,GAAGF,UAAU,CAC1BG,GADgB,CACZ,UAAAC,IAAI;UAAA,OAAK;YAAEA,IAAI,EAAJA,IAAF;YAAQC,OAAO,EAAED,IAAI,CAACL,KAAL,CAAW,0BAAX;UAAjB,CAAL;QAAA,CADQ,EAEhBI,GAFgB,CAEZ,gBAAuB;UAAA,IAApBC,IAAoB,QAApBA,IAAoB;UAAA,IAAdC,OAAc,QAAdA,OAAc;;UAC1B,IAAI,CAACA,OAAL,EAAc;YACZ,OAAO;cAAEC,aAAa,EAAEF;YAAjB,CAAP;UACD;;UACD,OAAO;YACLE,aAAa,EAAED,OAAO,CAAC,CAAD,CADjB;YAELE,EAAE,EAAEF,OAAO,CAAC,CAAD,CAFN;YAGLG,KAAK,EAAEH,OAAO,CAAC,CAAD;UAHT,CAAP;QAKD,CAXgB,CAAnB,CAlBiC,CA+BjC;;QACA,IAAMI,cAAc,GAAG,IAAAC,gBAAA,EACrBR,UAAU,CAACC,GAAX,CAAe;UAAA,IAAGG,aAAH,SAAGA,aAAH;UAAA,OAAuBA,aAAa,CAACK,OAAd,CAAsB,UAAtB,EAAkC,EAAlC,CAAvB;QAAA,CAAf,CADqB,CAAvB,CAhCiC,CAmCjC;;QACAX,UAAU,GAAGE,UAAU,CAACC,GAAX,CACX;UAAA,IAAGG,aAAH,SAAGA,aAAH;UAAA,IAAkBC,EAAlB,SAAkBA,EAAlB;UAAA,IAAsBC,KAAtB,SAAsBA,KAAtB;UAAA,OACEF,aAAa,IACZE,KAAK,GAAG,IAAII,MAAJ,CAAWH,cAAc,GAAGH,aAAa,CAACR,MAA/B,GAAwC,CAAnD,KAAyDS,EAAzD,aAAyDA,EAAzD,cAAyDA,EAAzD,GAA+D,EAA/D,IAAqEC,KAAxE,GAAgF,EADzE,CADf;QAAA,CADW,CAAb;QAKAZ,QAAQ,gCAAOA,QAAP,sBAAoBI,UAApB,EAAR;MAzCiC;;MAAA,yBAO7B;IAmCL;;IACDJ,QAAQ,CAACK,IAAT,CAAcP,KAAK,CAACG,CAAD,CAAnB;EACD;;EAED,OAAOD,QAAQ,CAACiB,IAAT,CAAc,IAAd,CAAP;AACD"}