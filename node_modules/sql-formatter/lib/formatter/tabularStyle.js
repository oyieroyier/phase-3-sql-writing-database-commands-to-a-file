"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = toTabularFormat;
exports.isTabularToken = isTabularToken;

var _token = require("../lexer/token");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * When tabular style enabled,
 * produces a 10-char wide version of token text.
 */
function toTabularFormat(tokenText, indentStyle) {
  if (indentStyle === 'standard') {
    return tokenText;
  }

  var tail = []; // rest of keyword

  if (tokenText.length >= 10 && tokenText.includes(' ')) {
    // split for long keywords like INNER JOIN or UNION DISTINCT
    var _tokenText$split = tokenText.split(' ');

    var _tokenText$split2 = _toArray(_tokenText$split);

    tokenText = _tokenText$split2[0];
    tail = _tokenText$split2.slice(1);
  }

  if (indentStyle === 'tabularLeft') {
    tokenText = tokenText.padEnd(9, ' ');
  } else {
    tokenText = tokenText.padStart(9, ' ');
  }

  return tokenText + [''].concat(_toConsumableArray(tail)).join(' ');
}
/**
 * True when the token can be formatted in tabular style
 */


function isTabularToken(type) {
  return (0, _token.isLogicalOperator)(type) || type === _token.TokenType.RESERVED_DEPENDENT_CLAUSE || type === _token.TokenType.RESERVED_COMMAND || type === _token.TokenType.RESERVED_SELECT || type === _token.TokenType.RESERVED_SET_OPERATION || type === _token.TokenType.RESERVED_JOIN || type === _token.TokenType.LIMIT;
}
//# sourceMappingURL=tabularStyle.js.map