"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.WS = void 0;

var _utils = require("../utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Whitespace modifiers to be used with add() method */
var WS;
exports.WS = WS;

(function (WS) {
  WS[WS["SPACE"] = 0] = "SPACE";
  WS[WS["NO_SPACE"] = 1] = "NO_SPACE";
  WS[WS["NO_NEWLINE"] = 2] = "NO_NEWLINE";
  WS[WS["NEWLINE"] = 3] = "NEWLINE";
  WS[WS["MANDATORY_NEWLINE"] = 4] = "MANDATORY_NEWLINE";
  WS[WS["INDENT"] = 5] = "INDENT";
  WS[WS["SINGLE_INDENT"] = 6] = "SINGLE_INDENT";
})(WS || (exports.WS = WS = {}));

/**
 * API for constructing SQL string (especially the whitespace part).
 *
 * It hides the internal implementation.
 * Originally it used plain string concatenation, which was expensive.
 * Now it's storing items to array and builds the string only in the end.
 */
var Layout = /*#__PURE__*/function () {
  function Layout(indentation) {
    _classCallCheck(this, Layout);

    this.indentation = indentation;

    _defineProperty(this, "items", []);
  }
  /**
   * Appends token strings and whitespace modifications to SQL string.
   */


  _createClass(Layout, [{
    key: "add",
    value: function add() {
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }

      for (var _i = 0, _items = items; _i < _items.length; _i++) {
        var item = _items[_i];

        switch (item) {
          case WS.SPACE:
            this.items.push(WS.SPACE);
            break;

          case WS.NO_SPACE:
            this.trimHorizontalWhitespace();
            break;

          case WS.NO_NEWLINE:
            this.trimWhitespace();
            break;

          case WS.NEWLINE:
            this.trimHorizontalWhitespace();
            this.addNewline(WS.NEWLINE);
            break;

          case WS.MANDATORY_NEWLINE:
            this.trimHorizontalWhitespace();
            this.addNewline(WS.MANDATORY_NEWLINE);
            break;

          case WS.INDENT:
            this.addIndentation();
            break;

          case WS.SINGLE_INDENT:
            this.items.push(WS.SINGLE_INDENT);
            break;

          default:
            this.items.push(item);
        }
      }
    }
  }, {
    key: "trimHorizontalWhitespace",
    value: function trimHorizontalWhitespace() {
      while (isHorizontalWhitespace((0, _utils.last)(this.items))) {
        this.items.pop();
      }
    }
  }, {
    key: "trimWhitespace",
    value: function trimWhitespace() {
      while (isRemovableWhitespace((0, _utils.last)(this.items))) {
        this.items.pop();
      }
    }
  }, {
    key: "addNewline",
    value: function addNewline(newline) {
      if (this.items.length > 0) {
        switch ((0, _utils.last)(this.items)) {
          case WS.NEWLINE:
            this.items.pop();
            this.items.push(newline);
            break;

          case WS.MANDATORY_NEWLINE:
            // keep as is
            break;

          default:
            this.items.push(newline);
            break;
        }
      }
    }
  }, {
    key: "addIndentation",
    value: function addIndentation() {
      for (var i = 0; i < this.indentation.getLevel(); i++) {
        this.items.push(WS.SINGLE_INDENT);
      }
    }
    /**
     * Returns the final SQL string.
     */

  }, {
    key: "toString",
    value: function toString() {
      var _this = this;

      return this.items.map(function (item) {
        return _this.itemToString(item);
      }).join('');
    }
    /**
     * Returns the internal layout data
     */

  }, {
    key: "getLayoutItems",
    value: function getLayoutItems() {
      return this.items;
    }
  }, {
    key: "itemToString",
    value: function itemToString(item) {
      switch (item) {
        case WS.SPACE:
          return ' ';

        case WS.NEWLINE:
        case WS.MANDATORY_NEWLINE:
          return '\n';

        case WS.SINGLE_INDENT:
          return this.indentation.getSingleIndent();

        default:
          return item;
      }
    }
  }]);

  return Layout;
}();

exports["default"] = Layout;

var isHorizontalWhitespace = function isHorizontalWhitespace(item) {
  return item === WS.SPACE || item === WS.SINGLE_INDENT;
};

var isRemovableWhitespace = function isRemovableWhitespace(item) {
  return item === WS.SPACE || item === WS.SINGLE_INDENT || item === WS.NEWLINE;
};
//# sourceMappingURL=Layout.js.map