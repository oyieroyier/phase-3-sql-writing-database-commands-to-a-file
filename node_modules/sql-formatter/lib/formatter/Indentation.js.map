{"version":3,"file":"Indentation.js","names":["INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","repeat","indentTypes","length","push","last","pop","type"],"sources":["../../src/formatter/Indentation.ts"],"sourcesContent":["import { last } from 'src/utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_COMMAND words\n */\nexport default class Indentation {\n  private indentTypes: string[] = [];\n\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(private indent: string) {}\n\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent(): string {\n    return this.indent;\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {string} indentation string based on indentTypes\n   */\n  getIndent(): string {\n    return this.indent.repeat(this.indentTypes.length);\n  }\n\n  /**\n   * Returns current indentation level\n   */\n  getLevel(): number {\n    return this.indentTypes.length;\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n\n  /** Clears all indentation */\n  resetIndentation() {\n    this.indentTypes = [];\n  }\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAG,WAA9B;AACA,IAAMC,uBAAuB,GAAG,aAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,W;EAGnB;AACF;AACA;EACE,qBAAoBC,MAApB,EAAoC;IAAA;;IAAA,KAAhBA,MAAgB,GAAhBA,MAAgB;;IAAA,qCALJ,EAKI;EAAE;EAEtC;AACF;AACA;;;;;WACE,2BAA0B;MACxB,OAAO,KAAKA,MAAZ;IACD;IAED;AACF;AACA;AACA;;;;WACE,qBAAoB;MAClB,OAAO,KAAKA,MAAL,CAAYC,MAAZ,CAAmB,KAAKC,WAAL,CAAiBC,MAApC,CAAP;IACD;IAED;AACF;AACA;;;;WACE,oBAAmB;MACjB,OAAO,KAAKD,WAAL,CAAiBC,MAAxB;IACD;IAED;AACF;AACA;;;;WACE,4BAAmB;MACjB,KAAKD,WAAL,CAAiBE,IAAjB,CAAsBP,qBAAtB;IACD;IAED;AACF;AACA;;;;WACE,8BAAqB;MACnB,KAAKK,WAAL,CAAiBE,IAAjB,CAAsBN,uBAAtB;IACD;IAED;AACF;AACA;AACA;;;;WACE,4BAAmB;MACjB,IAAI,KAAKI,WAAL,CAAiBC,MAAjB,GAA0B,CAA1B,IAA+B,IAAAE,WAAA,EAAK,KAAKH,WAAV,MAA2BL,qBAA9D,EAAqF;QACnF,KAAKK,WAAL,CAAiBI,GAAjB;MACD;IACF;IAED;AACF;AACA;AACA;AACA;;;;WACE,8BAAqB;MACnB,OAAO,KAAKJ,WAAL,CAAiBC,MAAjB,GAA0B,CAAjC,EAAoC;QAClC,IAAMI,IAAI,GAAG,KAAKL,WAAL,CAAiBI,GAAjB,EAAb;;QACA,IAAIC,IAAI,KAAKV,qBAAb,EAAoC;UAClC;QACD;MACF;IACF;IAED;;;;WACA,4BAAmB;MACjB,KAAKK,WAAL,GAAmB,EAAnB;IACD"}