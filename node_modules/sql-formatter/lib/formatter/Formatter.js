"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _config = require("./config");

var _Params = _interopRequireDefault(require("./Params"));

var _createParser = require("../parser/createParser");

var _formatCommaPositions = _interopRequireDefault(require("./formatCommaPositions"));

var _formatAliasPositions = _interopRequireDefault(require("./formatAliasPositions"));

var _ExpressionFormatter = _interopRequireDefault(require("./ExpressionFormatter"));

var _Layout = _interopRequireWildcard(require("./Layout"));

var _Indentation = _interopRequireDefault(require("./Indentation"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Main formatter class that produces a final output string from list of tokens */
var Formatter = /*#__PURE__*/function () {
  function Formatter(cfg) {
    _classCallCheck(this, Formatter);

    _defineProperty(this, "cfg", void 0);

    _defineProperty(this, "params", void 0);

    this.cfg = cfg;
    this.params = new _Params["default"](this.cfg.params);
  }
  /**
   * SQL Tokenizer for this formatter, provided by subclasses.
   */


  _createClass(Formatter, [{
    key: "tokenizer",
    value: function tokenizer() {
      throw new Error('tokenizer() not implemented by subclass');
    } // Cache the tokenizer for each class (each SQL dialect)
    // So we wouldn't need to recreate the tokenizer, which is kinda expensive,
    // for each call to format() function.

  }, {
    key: "cachedTokenizer",
    value: function cachedTokenizer() {
      var cls = this.constructor;

      if (!cls.cachedTokenizer) {
        cls.cachedTokenizer = this.tokenizer();
      }

      return cls.cachedTokenizer;
    }
    /**
     * Formats an SQL query.
     * @param {string} query - The SQL query string to be formatted
     * @return {string} The formatter query
     */

  }, {
    key: "format",
    value: function format(query) {
      var ast = this.parse(query);
      var formattedQuery = this.formatAst(ast);
      var finalQuery = this.postFormat(formattedQuery);
      return finalQuery.trimEnd();
    }
  }, {
    key: "parse",
    value: function parse(query) {
      return (0, _createParser.createParser)(this.cachedTokenizer()).parse(query, this.cfg.paramTypes || {});
    }
  }, {
    key: "formatAst",
    value: function formatAst(statements) {
      var _this = this;

      return statements.map(function (stat) {
        return _this.formatStatement(stat);
      }).join('\n'.repeat(this.cfg.linesBetweenQueries + 1));
    }
  }, {
    key: "formatStatement",
    value: function formatStatement(statement) {
      var layout = new _ExpressionFormatter["default"]({
        cfg: this.cfg,
        params: this.params,
        layout: new _Layout["default"](new _Indentation["default"]((0, _config.indentString)(this.cfg)))
      }).format(statement.children);

      if (!statement.hasSemicolon) {// do nothing
      } else if (this.cfg.newlineBeforeSemicolon) {
        layout.add(_Layout.WS.NEWLINE, ';');
      } else {
        layout.add(_Layout.WS.NO_NEWLINE, ';');
      }

      return layout.toString();
    }
  }, {
    key: "postFormat",
    value: function postFormat(query) {
      if (this.cfg.tabulateAlias) {
        query = (0, _formatAliasPositions["default"])(query);
      }

      if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {
        query = (0, _formatCommaPositions["default"])(query, this.cfg.commaPosition, (0, _config.indentString)(this.cfg));
      }

      return query;
    }
  }]);

  return Formatter;
}();

exports["default"] = Formatter;
module.exports = exports.default;
//# sourceMappingURL=Formatter.js.map