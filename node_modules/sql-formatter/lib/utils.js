"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sum = exports.sortByLengthDesc = exports.maxLength = exports.last = exports.flatKeywordList = exports.equalizeWhitespace = exports.dedupe = void 0;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var dedupe = function dedupe(arr) {
  return _toConsumableArray(new Set(arr));
}; // Last element from array


exports.dedupe = dedupe;

var last = function last(arr) {
  return arr[arr.length - 1];
}; // Sorts strings by length, so that longer ones are first
// Also sorts alphabetically after sorting by length.


exports.last = last;

var sortByLengthDesc = function sortByLengthDesc(strings) {
  return strings.sort(function (a, b) {
    return b.length - a.length || a.localeCompare(b);
  });
};
/** Get length of longest string in list of strings */


exports.sortByLengthDesc = sortByLengthDesc;

var maxLength = function maxLength(strings) {
  return strings.reduce(function (max, cur) {
    return Math.max(max, cur.length);
  }, 0);
}; // replaces long whitespace sequences with just one space


exports.maxLength = maxLength;

var equalizeWhitespace = function equalizeWhitespace(s) {
  return s.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/g, ' ');
}; // Adds up all values in array


exports.equalizeWhitespace = equalizeWhitespace;

var sum = function sum(arr) {
  var total = 0;

  var _iterator = _createForOfIteratorHelper(arr),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var x = _step.value;
      total += x;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return total;
}; // Used for flattening keyword lists


exports.sum = sum;

var flatKeywordList = function flatKeywordList(obj) {
  return dedupe(Object.values(obj).flat());
}; // Given a type and a field name, returns a type where this field is optional
//
// For example, these two type definitions are equivalent:
//
//   type Foo = Optional<{ foo: string, bar: number }, 'foo'>;
//   type Foo = { foo?: string, bar: number };
//


exports.flatKeywordList = flatKeywordList;
//# sourceMappingURL=utils.js.map