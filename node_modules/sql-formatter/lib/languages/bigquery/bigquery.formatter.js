"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Formatter2 = _interopRequireDefault(require("../../formatter/Formatter"));

var _Tokenizer = _interopRequireDefault(require("../../lexer/Tokenizer"));

var _token = require("../../lexer/token");

var _expandPhrases = require("../../expandPhrases");

var _bigquery = require("./bigquery.keywords");

var _bigquery2 = require("./bigquery.functions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var reservedSelect = (0, _expandPhrases.expandPhrases)(['SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]']);
var reservedCommands = (0, _expandPhrases.expandPhrases)([// Queries: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax
'WITH [RECURSIVE]', 'FROM', 'WHERE', 'GROUP BY', 'HAVING', 'QUALIFY', 'WINDOW', 'PARTITION BY', 'ORDER BY', 'LIMIT', 'OFFSET', 'OMIT RECORD IF', // legacy
// Data modification: https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax
// - insert:
'INSERT [INTO]', 'VALUES', // - update:
'UPDATE', 'SET', // - delete:
'DELETE [FROM]', // - truncate:
'TRUNCATE TABLE', // - merge:
'MERGE [INTO]', 'WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]', 'UPDATE SET', // Data definition, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language
'CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]', 'CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]', 'DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]', // - alter table:
'ALTER TABLE [IF EXISTS]', 'ADD COLUMN [IF NOT EXISTS]', 'DROP COLUMN [IF EXISTS]', 'RENAME TO', 'ALTER COLUMN [IF EXISTS]', 'SET DEFAULT COLLATE', // for alter column
'SET OPTIONS', // for alter column
'DROP NOT NULL', // for alter column
'SET DATA TYPE', // for alter column
'CREATE SCHEMA [IF NOT EXISTS]', 'DEFAULT COLLATE', 'CLUSTER BY', 'FOR SYSTEM_TIME AS OF', // CREATE SNAPSHOT TABLE
'WITH CONNECTION', 'WITH PARTITION COLUMNS', 'CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]', 'REMOTE WITH CONNECTION', 'RETURNS TABLE', 'CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]', 'CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]', 'GRANT TO', 'FILTER USING', 'CREATE CAPACITY', 'AS JSON', 'CREATE RESERVATION', 'CREATE ASSIGNMENT', 'CREATE SEARCH INDEX [IF NOT EXISTS]', 'ALTER SCHEMA [IF EXISTS]', 'ALTER [MATERIALIZED] VIEW [IF EXISTS]', 'ALTER BI_CAPACITY', 'DROP SCHEMA [IF EXISTS]', 'DROP [MATERIALIZED] VIEW [IF EXISTS]', 'DROP [TABLE] FUNCTION [IF EXISTS]', 'DROP PROCEDURE [IF EXISTS]', 'DROP ROW ACCESS POLICY', 'DROP ALL ROW ACCESS POLICIES', 'DROP CAPACITY [IF EXISTS]', 'DROP RESERVATION [IF EXISTS]', 'DROP ASSIGNMENT [IF EXISTS]', 'DROP SEARCH INDEX [IF EXISTS]', 'DROP [IF EXISTS]', // DCL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language
'GRANT', 'REVOKE', // Script, https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting
'DECLARE', 'EXECUTE IMMEDIATE', 'LOOP', 'END LOOP', 'REPEAT', 'END REPEAT', 'WHILE', 'END WHILE', 'BREAK', 'LEAVE', 'CONTINUE', 'ITERATE', 'FOR', 'END FOR', 'BEGIN', 'BEGIN TRANSACTION', 'COMMIT TRANSACTION', 'ROLLBACK TRANSACTION', 'RAISE', 'RETURN', 'CALL', // Debug, https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements
'ASSERT', // Other, https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements
'EXPORT DATA']);
var reservedSetOperations = (0, _expandPhrases.expandPhrases)(['UNION {ALL | DISTINCT}', 'EXCEPT DISTINCT', 'INTERSECT DISTINCT']);
var reservedJoins = (0, _expandPhrases.expandPhrases)(['JOIN', '{LEFT | RIGHT | FULL} [OUTER] JOIN', '{INNER | CROSS} JOIN']);
var reservedPhrases = (0, _expandPhrases.expandPhrases)([// https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#tablesample_operator
'TABLESAMPLE SYSTEM', // From DDL: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language
'ANY TYPE', 'ALL COLUMNS', 'NOT DETERMINISTIC', // inside window definitions
'{ROWS | RANGE} BETWEEN']); // https://cloud.google.com/bigquery/docs/reference/#standard-sql-reference

var BigQueryFormatter = /*#__PURE__*/function (_Formatter) {
  _inherits(BigQueryFormatter, _Formatter);

  var _super = _createSuper(BigQueryFormatter);

  function BigQueryFormatter() {
    _classCallCheck(this, BigQueryFormatter);

    return _super.apply(this, arguments);
  }

  _createClass(BigQueryFormatter, [{
    key: "tokenizer",
    value: // TODO: handle trailing comma in select clause
    function tokenizer() {
      return new _Tokenizer["default"]({
        reservedCommands: reservedCommands,
        reservedSelect: reservedSelect,
        reservedSetOperations: reservedSetOperations,
        reservedJoins: reservedJoins,
        reservedDependentClauses: ['WHEN', 'ELSE'],
        reservedPhrases: reservedPhrases,
        reservedKeywords: _bigquery.keywords,
        reservedFunctionNames: _bigquery2.functions,
        extraParens: ['[]'],
        stringTypes: [// The triple-quoted strings are listed first, so they get matched first.
        // Otherwise the first two quotes of """ will get matched as an empty "" string.
        {
          quote: '""".."""',
          prefixes: ['R', 'B', 'RB', 'BR']
        }, {
          quote: "'''..'''",
          prefixes: ['R', 'B', 'RB', 'BR']
        }, '""-bs', "''-bs", {
          quote: '""-raw',
          prefixes: ['R', 'B', 'RB', 'BR'],
          requirePrefix: true
        }, {
          quote: "''-raw",
          prefixes: ['R', 'B', 'RB', 'BR'],
          requirePrefix: true
        }],
        identTypes: ['``'],
        identChars: {
          dashes: true
        },
        paramTypes: {
          positional: true,
          named: ['@'],
          quoted: ['@']
        },
        lineCommentTypes: ['--', '#'],
        operators: ['&', '|', '^', '~', '>>', '<<', '||'],
        postProcess: postProcess
      });
    }
  }]);

  return BigQueryFormatter;
}(_Formatter2["default"]);

exports["default"] = BigQueryFormatter;

function postProcess(tokens) {
  return detectArraySubscripts(combineParameterizedTypes(tokens));
} // Converts OFFSET token inside array from RESERVED_COMMAND to RESERVED_FUNCTION_NAME
// See: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#array_subscript_operator


function detectArraySubscripts(tokens) {
  var prevToken = _token.EOF_TOKEN;
  return tokens.map(function (token) {
    if (token.text === 'OFFSET' && prevToken.text === '[') {
      prevToken = token;
      return _objectSpread(_objectSpread({}, token), {}, {
        type: _token.TokenType.RESERVED_FUNCTION_NAME
      });
    } else {
      prevToken = token;
      return token;
    }
  });
} // Combines multiple tokens forming a parameterized type like STRUCT<ARRAY<INT64>> into a single token


function combineParameterizedTypes(tokens) {
  var processed = [];

  for (var i = 0; i < tokens.length; i++) {
    var _tokens;

    var token = tokens[i];

    if ((_token.isToken.ARRAY(token) || _token.isToken.STRUCT(token)) && ((_tokens = tokens[i + 1]) === null || _tokens === void 0 ? void 0 : _tokens.text) === '<') {
      var endIndex = findClosingAngleBracketIndex(tokens, i + 1);
      var typeDefTokens = tokens.slice(i, endIndex + 1);
      processed.push({
        type: _token.TokenType.IDENTIFIER,
        raw: typeDefTokens.map(formatTypeDefToken('raw')).join(''),
        text: typeDefTokens.map(formatTypeDefToken('text')).join(''),
        start: token.start
      });
      i = endIndex;
    } else {
      processed.push(token);
    }
  }

  return processed;
}

var formatTypeDefToken = function formatTypeDefToken(key) {
  return function (token) {
    if (token.type === _token.TokenType.IDENTIFIER || token.type === _token.TokenType.COMMA) {
      return token[key] + ' ';
    } else {
      return token[key];
    }
  };
};

function findClosingAngleBracketIndex(tokens, startIndex) {
  var level = 0;

  for (var i = startIndex; i < tokens.length; i++) {
    var token = tokens[i];

    if (token.text === '<') {
      level++;
    } else if (token.text === '>') {
      level--;
    } else if (token.text === '>>') {
      level -= 2;
    }

    if (level === 0) {
      return i;
    }
  }

  return tokens.length - 1;
}

module.exports = exports.default;
//# sourceMappingURL=bigquery.formatter.js.map