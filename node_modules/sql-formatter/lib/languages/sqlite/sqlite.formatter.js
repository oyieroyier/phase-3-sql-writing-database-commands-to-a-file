"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _expandPhrases = require("../../expandPhrases");

var _Formatter2 = _interopRequireDefault(require("../../formatter/Formatter"));

var _Tokenizer = _interopRequireDefault(require("../../lexer/Tokenizer"));

var _sqlite = require("./sqlite.functions");

var _sqlite2 = require("./sqlite.keywords");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var reservedSelect = (0, _expandPhrases.expandPhrases)(['SELECT [ALL | DISTINCT]']);
var reservedCommands = (0, _expandPhrases.expandPhrases)([// queries
'WITH [RECURSIVE]', 'FROM', 'WHERE', 'GROUP BY', 'HAVING', 'WINDOW', 'PARTITION BY', 'ORDER BY', 'LIMIT', 'OFFSET', // Data manipulation
// - insert:
'INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO', 'REPLACE INTO', 'VALUES', // - update:
'UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]', 'SET', // - delete:
'DELETE FROM', // Data definition
'CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]', 'CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]', 'DROP TABLE [IF EXISTS]', // - alter table:
'ALTER TABLE', 'ADD [COLUMN]', 'DROP [COLUMN]', 'RENAME [COLUMN]', 'RENAME TO', // other
'SET SCHEMA']);
var reservedSetOperations = (0, _expandPhrases.expandPhrases)(['UNION [ALL]', 'EXCEPT', 'INTERSECT']); // joins - https://www.sqlite.org/syntax/join-operator.html

var reservedJoins = (0, _expandPhrases.expandPhrases)(['JOIN', '{LEFT | RIGHT | FULL} [OUTER] JOIN', '{INNER | CROSS} JOIN', 'NATURAL [INNER] JOIN', 'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN']);
var reservedPhrases = (0, _expandPhrases.expandPhrases)(['ON DELETE', 'ON UPDATE', '{ROWS | RANGE | GROUPS} BETWEEN']);

var SqliteFormatter = /*#__PURE__*/function (_Formatter) {
  _inherits(SqliteFormatter, _Formatter);

  var _super = _createSuper(SqliteFormatter);

  function SqliteFormatter() {
    _classCallCheck(this, SqliteFormatter);

    return _super.apply(this, arguments);
  }

  _createClass(SqliteFormatter, [{
    key: "tokenizer",
    value: function tokenizer() {
      return new _Tokenizer["default"]({
        reservedCommands: reservedCommands,
        reservedSelect: reservedSelect,
        reservedSetOperations: reservedSetOperations,
        reservedJoins: reservedJoins,
        reservedDependentClauses: ['WHEN', 'ELSE'],
        reservedPhrases: reservedPhrases,
        reservedKeywords: _sqlite2.keywords,
        reservedFunctionNames: _sqlite.functions,
        stringTypes: ["''-qq", {
          quote: "''-raw",
          prefixes: ['X'],
          requirePrefix: true
        } // Depending on context SQLite also supports double-quotes for strings,
        // and single-quotes for identifiers.
        ],
        identTypes: ["\"\"-qq", '``', '[]'],
        // https://www.sqlite.org/lang_expr.html#parameters
        paramTypes: {
          positional: true,
          numbered: ['?'],
          named: [':', '@', '$']
        },
        operators: ['%', '~', '&', '|', '<<', '>>', '==', '->', '->>', '||']
      });
    }
  }]);

  return SqliteFormatter;
}(_Formatter2["default"]);

exports["default"] = SqliteFormatter;
module.exports = exports.default;
//# sourceMappingURL=sqlite.formatter.js.map