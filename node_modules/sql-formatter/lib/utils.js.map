{"version":3,"file":"utils.js","names":["dedupe","arr","Set","last","length","sortByLengthDesc","strings","sort","a","b","localeCompare","maxLength","reduce","max","cur","Math","equalizeWhitespace","s","replace","sum","total","x","flatKeywordList","obj","Object","values","flat"],"sources":["../src/utils.ts"],"sourcesContent":["export const dedupe = (arr: string[]) => [...new Set(arr)];\n\n// Last element from array\nexport const last = <T>(arr: T[]): T | undefined => arr[arr.length - 1];\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings: string[]) =>\n  strings.sort((a, b) => b.length - a.length || a.localeCompare(b));\n\n/** Get length of longest string in list of strings */\nexport const maxLength = (strings: string[]) =>\n  strings.reduce((max, cur) => Math.max(max, cur.length), 0);\n\n// replaces long whitespace sequences with just one space\nexport const equalizeWhitespace = (s: string) => s.replace(/\\s+/gu, ' ');\n\n// Adds up all values in array\nexport const sum = (arr: number[]): number => {\n  let total = 0;\n  for (const x of arr) {\n    total += x;\n  }\n  return total;\n};\n\n// Used for flattening keyword lists\nexport const flatKeywordList = (obj: Record<string, string[]>): string[] =>\n  dedupe(Object.values(obj).flat());\n\n// Given a type and a field name, returns a type where this field is optional\n//\n// For example, these two type definitions are equivalent:\n//\n//   type Foo = Optional<{ foo: string, bar: number }, 'foo'>;\n//   type Foo = { foo?: string, bar: number };\n//\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;EAAA,0BAAuB,IAAIC,GAAJ,CAAQD,GAAR,CAAvB;AAAA,CAAf,C,CAEP;;;;;AACO,IAAME,IAAI,GAAG,SAAPA,IAAO,CAAIF,GAAJ;EAAA,OAAgCA,GAAG,CAACA,GAAG,CAACG,MAAJ,GAAa,CAAd,CAAnC;AAAA,CAAb,C,CAEP;AACA;;;;;AACO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD;EAAA,OAC9BA,OAAO,CAACC,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUA,CAAC,CAACL,MAAF,GAAWI,CAAC,CAACJ,MAAb,IAAuBI,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAAjC;EAAA,CAAb,CAD8B;AAAA,CAAzB;AAGP;;;;;AACO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACL,OAAD;EAAA,OACvBA,OAAO,CAACM,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN;IAAA,OAAcC,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcC,GAAG,CAACV,MAAlB,CAAd;EAAA,CAAf,EAAwD,CAAxD,CADuB;AAAA,CAAlB,C,CAGP;;;;;AACO,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD;EAAA,OAAeA,CAAC,CAACC,OAAF,CAAU,uEAAV,EAAmB,GAAnB,CAAf;AAAA,CAA3B,C,CAEP;;;;;AACO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAClB,GAAD,EAA2B;EAC5C,IAAImB,KAAK,GAAG,CAAZ;;EAD4C,2CAE5BnB,GAF4B;EAAA;;EAAA;IAE5C,oDAAqB;MAAA,IAAVoB,CAAU;MACnBD,KAAK,IAAIC,CAAT;IACD;EAJ2C;IAAA;EAAA;IAAA;EAAA;;EAK5C,OAAOD,KAAP;AACD,CANM,C,CAQP;;;;;AACO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD;EAAA,OAC7BvB,MAAM,CAACwB,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmBG,IAAnB,EAAD,CADuB;AAAA,CAAxB,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA"}